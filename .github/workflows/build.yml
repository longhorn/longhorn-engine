name: build
on:
  push:
    branches:
    - master
    - v*
    tags:
    - v*
  pull_request:
jobs:
  build_info:
    name: Collect build info
    runs-on: ubuntu-latest
    outputs:
      version_major: ${{ steps.build_info.outputs.version_major }}
      version_minor: ${{ steps.build_info.outputs.version_minor }}
      version_patch: ${{ steps.build_info.outputs.version_patch }}
      image_tag: ${{ steps.build_info.outputs.image_tag }}

    steps:
    - id: build_info
      name: Declare build info
      run: |
        version_major=''
        version_minor=''
        version_patch=''
        image_tag=''

        branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        ref=${{ github.ref }}
        if [[ "$ref" =~ 'refs/tags/' ]]; then
          version=$(sed -E 's/^v([0-9]*\.[0-9]*\.[0-9]*).*$/\1/' <<<${{ github.ref_name }} )
          version_major=$(cut -d. -f1 <<<$version)
          version_minor=$(cut -d. -f2 <<<$version)
          version_patch=$(cut -d. -f3 <<<$version)
          image_tag=${{ github.ref_name }}
        elif [[ "$ref" =~ 'refs/heads/' ]]; then
          image_tag="${branch}-head"
        fi

        echo "version_major=${version_major}" >>$GITHUB_OUTPUT
        echo "version_minor=${version_minor}" >>$GITHUB_OUTPUT
        echo "version_patch=${version_patch}" >>$GITHUB_OUTPUT
        echo "image_tag=${image_tag}" >>$GITHUB_OUTPUT

        cat <<EOF
        version_major=${version_major}
        version_minor=${version_minor}
        version_patch=${version_patch}
        image_tag=${image_tag}
        EOF

  build-amd64-binaries:
    name: Build AMD64 binaries
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Build binaries
    - name: Run make ci
      run: SKIP_TASKS=package make ci

    - uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: binaries_amd64_artifact
        path: ./bin/*

  build-arm64-binaries:
    name: Build ARM64 binaries
    runs-on: longhorn-infra-oracle-arm64-runners
    steps:
    - name: Install make curl git
      run: |
        sudo apt update
        sudo apt-get -y install make curl git

    - name: Checkout code
      uses: actions/checkout@v4

    # Build binaries
    - name: Run make build
      run: make build

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: binaries_arm64_artifact
        path: ./bin/*

  build-push-amd64-images:
    name: Build and push AMD64 images
    runs-on: ubuntu-latest
    needs: [build_info, build-amd64-binaries]
    if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download binaries
      uses: actions/download-artifact@v4
      with:
        name: binaries_amd64_artifact
        path: ./bin/

    - name: Add executable permission
      run: |
        chmod +x ./bin/*

    - name: Copy bin folder to package
      run: |
        cp -r ./bin ./package/

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # longhornio/longhorn-engine image
    - name: Build and publish image
      env:
        REPO: docker.io/longhornio
        TAG: ${{ needs.build_info.outputs.image_tag }}-amd64
        TARGET_PLATFORMS: linux/amd64
      run: make workflow-image-build-push

  build-push-arm64-images:
    name: Build and push ARM64 images
    runs-on: longhorn-infra-oracle-arm64-runners
    needs: [build_info, build-arm64-binaries]
    if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}
    steps:
    - name: Install make curl git
      run: |
        sudo apt update
        sudo apt-get -y install make curl git

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download binaries
      uses: actions/download-artifact@v4
      with:
        name: binaries_arm64_artifact
        path: ./bin/

    - name: Add executable permission
      run: |
        chmod +x ./bin/*

    - name: Copy bin folder to package
      run: |
        cp -r ./bin ./package/

    - name: Login to Docker Hub
      if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # longhornio/longhorn-engine image
    - name: Build and publish image
      env:
        REPO: docker.io/longhornio
        TAG: ${{ needs.build_info.outputs.image_tag }}-arm64
        TARGET_PLATFORMS: linux/arm64
      run: make workflow-image-build-push


  manifest-image:
    name: Manifest images
    runs-on: ubuntu-latest
    needs: [build_info, build-push-amd64-images, build-push-arm64-images]
    if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # longhornio/longhorn-engine image
    - name: docker-pull-manifest-longhorn-engine
      env:
        REPO: docker.io/longhornio
        TAG: ${{ needs.build_info.outputs.image_tag }}
      run: make workflow-manifest-image
