#!/bin/bash
set -e

# Don't want to kill longhorn in another namespace for now
#
#killall longhorn ssync || true
#
#running=""
#for i in `seq 10`
#do
#	running=`ps aux|grep longhorn|grep -v grep || true`
#	if [ -z "$running" ]
#	then
#		break
#	fi
#	echo Wait one more second for longhorn process to stop
#	sleep 1
#done
#if [ "$running" ]
#then
#	echo Failed to wait for longhorn process stop
#	echo $running
#	exit -1
#fi

uuid=$(uuidgen)
export TESTPREFIX=test-${uuid:0:8}-

backing_dir1='/tmp/replica_backing_dir_1/'
backing_dir2='/tmp/replica_backing_dir_2/'
fixed_dir1='/tmp/replica_fixed_dir_1/'
fixed_dir2='/tmp/replica_fixed_dir_2/'
mkdir -p $backing_dir1 $backing_dir2 $fixed_dir1 $fixed_dir2
trap "rm -rf $backing_dir1 $backing_dir2 $fixed_dir1 $fixed_dir2" EXIT

cd $(dirname $0)/..

if [ ! -x ./bin/longhorn ]; then
    ./scripts/build
fi


if [ -d '/host/dev' ]
then
	mount --rbind /host/dev /dev
fi

# set credential for replica to test backup restore
export AWS_ACCESS_KEY_ID=test-access-key
export AWS_SECRET_ACCESS_KEY=test-secret-key
export AWS_ENDPOINTS=http://127.0.0.1:9000

# replica with 4MB backing file
backing_file='backing_file.raw'
backing_qcow2='backing_file.qcow2'
cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $((1024 * 4096)) | head -n 1 > $backing_file
truncate -s 4M $backing_file

qemu-img convert -f raw -O qcow2 $backing_file $backing_qcow2
cp $backing_qcow2 $backing_dir1
cp $backing_qcow2 $backing_dir2

# for live upgrade test
cp -a ./bin/longhorn /opt/

/usr/local/bin/longhorn-instance-manager --debug daemon &
pid_im=$!

# make sure everything is running before continue integration test
ps $pid_im

trap "kill $pid_im" EXIT

# start minio server to test s3 backup and set credential keys
export MINIO_ACCESS_KEY=test-access-key
export MINIO_SECRET_KEY=test-secret-key
# create default bucket
mkdir -p /data/backupbucket
# run minio server
/usr/bin/minio server /data &

export BACKUPTARGETS=s3://backupbucket@us-east-1/backupstore,vfs:///data/backupbucket

cd integration
find -depth -name __pycache__ -o -name "*.pyc" -exec rm -rf {} \;
if [ -z "$NO_TEST" ]; then
    tox "$@"
fi
