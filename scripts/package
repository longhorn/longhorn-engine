#!/bin/bash
set -e

function convert_version_to_major_minor_x() {
    local version="$1"
    if [[ "$version" =~ ^v([0-9]+)\.([0-9]+)\. ]]; then
        echo "v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.x"
    else
        echo "Invalid version format: $version"
    fi
}

function get_branch() {
  local version_file="version"
  if [[ ! -f $version_file ]]; then
    echo "Error: Version file '$version_file' not found."
    exit 1
  fi

  local version=$(cat "$version_file")
  local branch=$(convert_version_to_major_minor_x "$version")

  # Fetch versions.json from the appropriate branch, fallback to main
  wget -q "https://raw.githubusercontent.com/longhorn/dep-versions/${branch}/versions.json" -O /versions.json
  if [ $? -eq 0 ]; then
    echo "${branch}"
  else
    echo "main"
  fi
}

source $(dirname $0)/version

cd $(dirname $0)/..

PROJECT=`basename "$PWD"`

TAG=${TAG:-${VERSION}}
REPO=${REPO:-longhornio}
IMAGE=${REPO}/${PROJECT}:${TAG}

case $(uname -m) in
	aarch64 | arm64)
		ARCH=arm64
		;;
	x86_64)
		ARCH=amd64
		;;
  s390x)
    ARCH=s390x
    ;;
	*)
		echo "$(uname -a): unsupported architecture"
		exit 1
esac

if [ ! -x ./bin/longhorn ]; then
    ./scripts/build
fi

cp /usr/local/bin/longhorn-instance-manager ./bin/
cp -r ./bin ./package/

# update base image to get latest changes
grep FROM package/Dockerfile | awk '{print $2}' | while read -r BASE_IMAGE
do
    docker pull "$BASE_IMAGE"
done

SRC_BRANCH=$(get_branch)
SRC_TAG=$(git tag --points-at HEAD | head -n 1)

docker build \
  --build-arg ARCH=${ARCH} \
  --build-arg SRC_BRANCH="${SRC_BRANCH}" \
  --build-arg SRC_TAG="${SRC_TAG}" \
  -t ${IMAGE} \
  -f package/Dockerfile .

echo Built ${IMAGE}

echo ${IMAGE} > ./bin/latest_image
