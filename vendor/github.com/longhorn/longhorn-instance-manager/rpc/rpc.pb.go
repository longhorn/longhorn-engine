// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EngineSpec struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VolumeName           string   `protobuf:"bytes,3,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	Binary               string   `protobuf:"bytes,4,opt,name=binary,proto3" json:"binary,omitempty"`
	Listen               string   `protobuf:"bytes,5,opt,name=listen,proto3" json:"listen,omitempty"`
	ListenIp             string   `protobuf:"bytes,6,opt,name=listen_ip,json=listenIp,proto3" json:"listen_ip,omitempty"`
	Size                 int64    `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Frontend             string   `protobuf:"bytes,8,opt,name=frontend,proto3" json:"frontend,omitempty"`
	Backends             []string `protobuf:"bytes,9,rep,name=backends,proto3" json:"backends,omitempty"`
	Replicas             []string `protobuf:"bytes,10,rep,name=replicas,proto3" json:"replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EngineSpec) Reset()         { *m = EngineSpec{} }
func (m *EngineSpec) String() string { return proto.CompactTextString(m) }
func (*EngineSpec) ProtoMessage()    {}
func (*EngineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *EngineSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EngineSpec.Unmarshal(m, b)
}
func (m *EngineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EngineSpec.Marshal(b, m, deterministic)
}
func (m *EngineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineSpec.Merge(m, src)
}
func (m *EngineSpec) XXX_Size() int {
	return xxx_messageInfo_EngineSpec.Size(m)
}
func (m *EngineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EngineSpec proto.InternalMessageInfo

func (m *EngineSpec) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *EngineSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EngineSpec) GetVolumeName() string {
	if m != nil {
		return m.VolumeName
	}
	return ""
}

func (m *EngineSpec) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *EngineSpec) GetListen() string {
	if m != nil {
		return m.Listen
	}
	return ""
}

func (m *EngineSpec) GetListenIp() string {
	if m != nil {
		return m.ListenIp
	}
	return ""
}

func (m *EngineSpec) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *EngineSpec) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

func (m *EngineSpec) GetBackends() []string {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *EngineSpec) GetReplicas() []string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type EngineStatus struct {
	ProcessStatus        *ProcessStatus `protobuf:"bytes,1,opt,name=process_status,json=processStatus,proto3" json:"process_status,omitempty"`
	Endpoint             string         `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ResourceVersion      int64          `protobuf:"varint,3,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *EngineStatus) Reset()         { *m = EngineStatus{} }
func (m *EngineStatus) String() string { return proto.CompactTextString(m) }
func (*EngineStatus) ProtoMessage()    {}
func (*EngineStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *EngineStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EngineStatus.Unmarshal(m, b)
}
func (m *EngineStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EngineStatus.Marshal(b, m, deterministic)
}
func (m *EngineStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineStatus.Merge(m, src)
}
func (m *EngineStatus) XXX_Size() int {
	return xxx_messageInfo_EngineStatus.Size(m)
}
func (m *EngineStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineStatus.DiscardUnknown(m)
}

var xxx_messageInfo_EngineStatus proto.InternalMessageInfo

func (m *EngineStatus) GetProcessStatus() *ProcessStatus {
	if m != nil {
		return m.ProcessStatus
	}
	return nil
}

func (m *EngineStatus) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *EngineStatus) GetResourceVersion() int64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

type EngineResponse struct {
	Spec                 *EngineSpec   `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Status               *EngineStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Deleted              bool          `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EngineResponse) Reset()         { *m = EngineResponse{} }
func (m *EngineResponse) String() string { return proto.CompactTextString(m) }
func (*EngineResponse) ProtoMessage()    {}
func (*EngineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *EngineResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EngineResponse.Unmarshal(m, b)
}
func (m *EngineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EngineResponse.Marshal(b, m, deterministic)
}
func (m *EngineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineResponse.Merge(m, src)
}
func (m *EngineResponse) XXX_Size() int {
	return xxx_messageInfo_EngineResponse.Size(m)
}
func (m *EngineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EngineResponse proto.InternalMessageInfo

func (m *EngineResponse) GetSpec() *EngineSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *EngineResponse) GetStatus() *EngineStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *EngineResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type EngineCreateRequest struct {
	Spec                 *EngineSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EngineCreateRequest) Reset()         { *m = EngineCreateRequest{} }
func (m *EngineCreateRequest) String() string { return proto.CompactTextString(m) }
func (*EngineCreateRequest) ProtoMessage()    {}
func (*EngineCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *EngineCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EngineCreateRequest.Unmarshal(m, b)
}
func (m *EngineCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EngineCreateRequest.Marshal(b, m, deterministic)
}
func (m *EngineCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineCreateRequest.Merge(m, src)
}
func (m *EngineCreateRequest) XXX_Size() int {
	return xxx_messageInfo_EngineCreateRequest.Size(m)
}
func (m *EngineCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EngineCreateRequest proto.InternalMessageInfo

func (m *EngineCreateRequest) GetSpec() *EngineSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type EngineRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EngineRequest) Reset()         { *m = EngineRequest{} }
func (m *EngineRequest) String() string { return proto.CompactTextString(m) }
func (*EngineRequest) ProtoMessage()    {}
func (*EngineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{4}
}

func (m *EngineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EngineRequest.Unmarshal(m, b)
}
func (m *EngineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EngineRequest.Marshal(b, m, deterministic)
}
func (m *EngineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineRequest.Merge(m, src)
}
func (m *EngineRequest) XXX_Size() int {
	return xxx_messageInfo_EngineRequest.Size(m)
}
func (m *EngineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EngineRequest proto.InternalMessageInfo

func (m *EngineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EngineUpgradeRequest struct {
	Spec                 *EngineSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EngineUpgradeRequest) Reset()         { *m = EngineUpgradeRequest{} }
func (m *EngineUpgradeRequest) String() string { return proto.CompactTextString(m) }
func (*EngineUpgradeRequest) ProtoMessage()    {}
func (*EngineUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{5}
}

func (m *EngineUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EngineUpgradeRequest.Unmarshal(m, b)
}
func (m *EngineUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EngineUpgradeRequest.Marshal(b, m, deterministic)
}
func (m *EngineUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineUpgradeRequest.Merge(m, src)
}
func (m *EngineUpgradeRequest) XXX_Size() int {
	return xxx_messageInfo_EngineUpgradeRequest.Size(m)
}
func (m *EngineUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EngineUpgradeRequest proto.InternalMessageInfo

func (m *EngineUpgradeRequest) GetSpec() *EngineSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type EngineListResponse struct {
	Engines              map[string]*EngineResponse `protobuf:"bytes,1,rep,name=engines,proto3" json:"engines,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *EngineListResponse) Reset()         { *m = EngineListResponse{} }
func (m *EngineListResponse) String() string { return proto.CompactTextString(m) }
func (*EngineListResponse) ProtoMessage()    {}
func (*EngineListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{6}
}

func (m *EngineListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EngineListResponse.Unmarshal(m, b)
}
func (m *EngineListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EngineListResponse.Marshal(b, m, deterministic)
}
func (m *EngineListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineListResponse.Merge(m, src)
}
func (m *EngineListResponse) XXX_Size() int {
	return xxx_messageInfo_EngineListResponse.Size(m)
}
func (m *EngineListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EngineListResponse proto.InternalMessageInfo

func (m *EngineListResponse) GetEngines() map[string]*EngineResponse {
	if m != nil {
		return m.Engines
	}
	return nil
}

type FrontendStartRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Frontend             string   `protobuf:"bytes,2,opt,name=frontend,proto3" json:"frontend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontendStartRequest) Reset()         { *m = FrontendStartRequest{} }
func (m *FrontendStartRequest) String() string { return proto.CompactTextString(m) }
func (*FrontendStartRequest) ProtoMessage()    {}
func (*FrontendStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{7}
}

func (m *FrontendStartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrontendStartRequest.Unmarshal(m, b)
}
func (m *FrontendStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrontendStartRequest.Marshal(b, m, deterministic)
}
func (m *FrontendStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontendStartRequest.Merge(m, src)
}
func (m *FrontendStartRequest) XXX_Size() int {
	return xxx_messageInfo_FrontendStartRequest.Size(m)
}
func (m *FrontendStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontendStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FrontendStartRequest proto.InternalMessageInfo

func (m *FrontendStartRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FrontendStartRequest) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

type ProcessSpec struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Binary               string   `protobuf:"bytes,3,opt,name=binary,proto3" json:"binary,omitempty"`
	Args                 []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	PortCount            int32    `protobuf:"varint,5,opt,name=port_count,json=portCount,proto3" json:"port_count,omitempty"`
	PortArgs             []string `protobuf:"bytes,6,rep,name=port_args,json=portArgs,proto3" json:"port_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessSpec) Reset()         { *m = ProcessSpec{} }
func (m *ProcessSpec) String() string { return proto.CompactTextString(m) }
func (*ProcessSpec) ProtoMessage()    {}
func (*ProcessSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{8}
}

func (m *ProcessSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessSpec.Unmarshal(m, b)
}
func (m *ProcessSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessSpec.Marshal(b, m, deterministic)
}
func (m *ProcessSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessSpec.Merge(m, src)
}
func (m *ProcessSpec) XXX_Size() int {
	return xxx_messageInfo_ProcessSpec.Size(m)
}
func (m *ProcessSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessSpec proto.InternalMessageInfo

func (m *ProcessSpec) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ProcessSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProcessSpec) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *ProcessSpec) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ProcessSpec) GetPortCount() int32 {
	if m != nil {
		return m.PortCount
	}
	return 0
}

func (m *ProcessSpec) GetPortArgs() []string {
	if m != nil {
		return m.PortArgs
	}
	return nil
}

type ProcessStatus struct {
	State                string   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	PortStart            int32    `protobuf:"varint,3,opt,name=port_start,json=portStart,proto3" json:"port_start,omitempty"`
	PortEnd              int32    `protobuf:"varint,4,opt,name=port_end,json=portEnd,proto3" json:"port_end,omitempty"`
	ResourceVersion      int64    `protobuf:"varint,5,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessStatus) Reset()         { *m = ProcessStatus{} }
func (m *ProcessStatus) String() string { return proto.CompactTextString(m) }
func (*ProcessStatus) ProtoMessage()    {}
func (*ProcessStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{9}
}

func (m *ProcessStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessStatus.Unmarshal(m, b)
}
func (m *ProcessStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessStatus.Marshal(b, m, deterministic)
}
func (m *ProcessStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessStatus.Merge(m, src)
}
func (m *ProcessStatus) XXX_Size() int {
	return xxx_messageInfo_ProcessStatus.Size(m)
}
func (m *ProcessStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessStatus proto.InternalMessageInfo

func (m *ProcessStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ProcessStatus) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *ProcessStatus) GetPortStart() int32 {
	if m != nil {
		return m.PortStart
	}
	return 0
}

func (m *ProcessStatus) GetPortEnd() int32 {
	if m != nil {
		return m.PortEnd
	}
	return 0
}

func (m *ProcessStatus) GetResourceVersion() int64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

type ProcessCreateRequest struct {
	Spec                 *ProcessSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProcessCreateRequest) Reset()         { *m = ProcessCreateRequest{} }
func (m *ProcessCreateRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessCreateRequest) ProtoMessage()    {}
func (*ProcessCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{10}
}

func (m *ProcessCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessCreateRequest.Unmarshal(m, b)
}
func (m *ProcessCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessCreateRequest.Marshal(b, m, deterministic)
}
func (m *ProcessCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessCreateRequest.Merge(m, src)
}
func (m *ProcessCreateRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessCreateRequest.Size(m)
}
func (m *ProcessCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessCreateRequest proto.InternalMessageInfo

func (m *ProcessCreateRequest) GetSpec() *ProcessSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ProcessDeleteRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessDeleteRequest) Reset()         { *m = ProcessDeleteRequest{} }
func (m *ProcessDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessDeleteRequest) ProtoMessage()    {}
func (*ProcessDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{11}
}

func (m *ProcessDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessDeleteRequest.Unmarshal(m, b)
}
func (m *ProcessDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessDeleteRequest.Marshal(b, m, deterministic)
}
func (m *ProcessDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessDeleteRequest.Merge(m, src)
}
func (m *ProcessDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessDeleteRequest.Size(m)
}
func (m *ProcessDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessDeleteRequest proto.InternalMessageInfo

func (m *ProcessDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProcessGetRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessGetRequest) Reset()         { *m = ProcessGetRequest{} }
func (m *ProcessGetRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessGetRequest) ProtoMessage()    {}
func (*ProcessGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{12}
}

func (m *ProcessGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessGetRequest.Unmarshal(m, b)
}
func (m *ProcessGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessGetRequest.Marshal(b, m, deterministic)
}
func (m *ProcessGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessGetRequest.Merge(m, src)
}
func (m *ProcessGetRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessGetRequest.Size(m)
}
func (m *ProcessGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessGetRequest proto.InternalMessageInfo

func (m *ProcessGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProcessResponse struct {
	Spec                 *ProcessSpec   `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Status               *ProcessStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Deleted              bool           `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProcessResponse) Reset()         { *m = ProcessResponse{} }
func (m *ProcessResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessResponse) ProtoMessage()    {}
func (*ProcessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{13}
}

func (m *ProcessResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessResponse.Unmarshal(m, b)
}
func (m *ProcessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessResponse.Marshal(b, m, deterministic)
}
func (m *ProcessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessResponse.Merge(m, src)
}
func (m *ProcessResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessResponse.Size(m)
}
func (m *ProcessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessResponse proto.InternalMessageInfo

func (m *ProcessResponse) GetSpec() *ProcessSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProcessResponse) GetStatus() *ProcessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProcessResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type ProcessListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessListRequest) Reset()         { *m = ProcessListRequest{} }
func (m *ProcessListRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessListRequest) ProtoMessage()    {}
func (*ProcessListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{14}
}

func (m *ProcessListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessListRequest.Unmarshal(m, b)
}
func (m *ProcessListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessListRequest.Marshal(b, m, deterministic)
}
func (m *ProcessListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessListRequest.Merge(m, src)
}
func (m *ProcessListRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessListRequest.Size(m)
}
func (m *ProcessListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessListRequest proto.InternalMessageInfo

type ProcessListResponse struct {
	Processes            map[string]*ProcessResponse `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ProcessListResponse) Reset()         { *m = ProcessListResponse{} }
func (m *ProcessListResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessListResponse) ProtoMessage()    {}
func (*ProcessListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{15}
}

func (m *ProcessListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessListResponse.Unmarshal(m, b)
}
func (m *ProcessListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessListResponse.Marshal(b, m, deterministic)
}
func (m *ProcessListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessListResponse.Merge(m, src)
}
func (m *ProcessListResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessListResponse.Size(m)
}
func (m *ProcessListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessListResponse proto.InternalMessageInfo

func (m *ProcessListResponse) GetProcesses() map[string]*ProcessResponse {
	if m != nil {
		return m.Processes
	}
	return nil
}

type LogRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{16}
}

func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LogResponse struct {
	Line                 string   `protobuf:"bytes,2,opt,name=line,proto3" json:"line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{17}
}

func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResponse.Unmarshal(m, b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
}
func (m *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(m, src)
}
func (m *LogResponse) XXX_Size() int {
	return xxx_messageInfo_LogResponse.Size(m)
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

func (m *LogResponse) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func init() {
	proto.RegisterType((*EngineSpec)(nil), "EngineSpec")
	proto.RegisterType((*EngineStatus)(nil), "EngineStatus")
	proto.RegisterType((*EngineResponse)(nil), "EngineResponse")
	proto.RegisterType((*EngineCreateRequest)(nil), "EngineCreateRequest")
	proto.RegisterType((*EngineRequest)(nil), "EngineRequest")
	proto.RegisterType((*EngineUpgradeRequest)(nil), "EngineUpgradeRequest")
	proto.RegisterType((*EngineListResponse)(nil), "EngineListResponse")
	proto.RegisterMapType((map[string]*EngineResponse)(nil), "EngineListResponse.EnginesEntry")
	proto.RegisterType((*FrontendStartRequest)(nil), "FrontendStartRequest")
	proto.RegisterType((*ProcessSpec)(nil), "ProcessSpec")
	proto.RegisterType((*ProcessStatus)(nil), "ProcessStatus")
	proto.RegisterType((*ProcessCreateRequest)(nil), "ProcessCreateRequest")
	proto.RegisterType((*ProcessDeleteRequest)(nil), "ProcessDeleteRequest")
	proto.RegisterType((*ProcessGetRequest)(nil), "ProcessGetRequest")
	proto.RegisterType((*ProcessResponse)(nil), "ProcessResponse")
	proto.RegisterType((*ProcessListRequest)(nil), "ProcessListRequest")
	proto.RegisterType((*ProcessListResponse)(nil), "ProcessListResponse")
	proto.RegisterMapType((map[string]*ProcessResponse)(nil), "ProcessListResponse.ProcessesEntry")
	proto.RegisterType((*LogRequest)(nil), "LogRequest")
	proto.RegisterType((*LogResponse)(nil), "LogResponse")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 1000 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0x15, 0xf5, 0x67, 0x6b, 0x64, 0xc9, 0xfe, 0xd6, 0x52, 0xc0, 0x8f, 0x41, 0x51, 0x95, 0x41,
	0x52, 0x37, 0x05, 0x36, 0xae, 0xfb, 0x93, 0xd4, 0xcd, 0x45, 0x0d, 0xc7, 0x09, 0x8a, 0x3a, 0x41,
	0x41, 0xa3, 0xed, 0xa5, 0x40, 0x53, 0x1b, 0x86, 0x08, 0xbd, 0x64, 0x77, 0x97, 0x2e, 0xdc, 0x47,
	0x28, 0xfa, 0x06, 0x45, 0xaf, 0xdb, 0x87, 0xeb, 0x43, 0x14, 0xfb, 0x47, 0x89, 0x12, 0x2d, 0xdb,
	0x77, 0x3b, 0x67, 0x66, 0xb8, 0xa3, 0xe1, 0x39, 0x87, 0x82, 0x1e, 0xcb, 0x23, 0x9c, 0xb3, 0x4c,
	0x64, 0xde, 0xfd, 0x38, 0xcb, 0xe2, 0x94, 0x3c, 0x51, 0xd1, 0x79, 0xf1, 0xf6, 0x09, 0xb9, 0xc8,
	0xc5, 0x95, 0x4e, 0xfa, 0xbf, 0x37, 0x01, 0x4e, 0x68, 0x9c, 0x50, 0x72, 0x96, 0x93, 0x08, 0x21,
	0x68, 0x17, 0x45, 0x32, 0x73, 0x9d, 0x89, 0xb3, 0xd7, 0x0b, 0xd4, 0x59, 0x62, 0x34, 0xbc, 0x20,
	0x6e, 0x53, 0x63, 0xf2, 0x8c, 0x3e, 0x84, 0xfe, 0x65, 0x96, 0x16, 0x17, 0x64, 0xaa, 0x52, 0x2d,
	0x95, 0x02, 0x0d, 0xbd, 0x91, 0x05, 0xf7, 0xa0, 0x7b, 0x9e, 0xd0, 0x90, 0x5d, 0xb9, 0x6d, 0x95,
	0x33, 0x91, 0xc4, 0xd3, 0x84, 0x0b, 0x42, 0xdd, 0x8e, 0xc6, 0x75, 0x84, 0xee, 0x43, 0x4f, 0x9f,
	0xa6, 0x49, 0xee, 0x76, 0x55, 0x6a, 0x53, 0x03, 0xdf, 0xe5, 0x72, 0x02, 0x9e, 0xfc, 0x46, 0xdc,
	0x8d, 0x89, 0xb3, 0xd7, 0x0a, 0xd4, 0x19, 0x79, 0xb0, 0xf9, 0x96, 0x65, 0x54, 0x10, 0x3a, 0x73,
	0x37, 0x75, 0xbd, 0x8d, 0x65, 0xee, 0x3c, 0x8c, 0xde, 0x13, 0x3a, 0xe3, 0x6e, 0x6f, 0xd2, 0x92,
	0x39, 0x1b, 0xcb, 0x1c, 0x23, 0x79, 0x9a, 0x44, 0x21, 0x77, 0x41, 0xe7, 0x6c, 0xec, 0xff, 0xe1,
	0xc0, 0x96, 0x59, 0x86, 0x08, 0x45, 0xc1, 0xd1, 0x97, 0x30, 0xcc, 0x59, 0x16, 0x11, 0xce, 0xa7,
	0x5c, 0x21, 0x6a, 0x31, 0xfd, 0x83, 0x21, 0xfe, 0x41, 0xc3, 0xba, 0x2e, 0x18, 0xe4, 0x8b, 0xa1,
	0xbc, 0x83, 0xd0, 0x59, 0x9e, 0x25, 0x54, 0x98, 0xad, 0x95, 0x31, 0xfa, 0x04, 0x76, 0x18, 0xe1,
	0x59, 0xc1, 0x22, 0x32, 0xbd, 0x24, 0x8c, 0x27, 0x19, 0x55, 0xeb, 0x6b, 0x05, 0xdb, 0x16, 0xff,
	0x49, 0xc3, 0x3e, 0x83, 0xa1, 0x9e, 0x26, 0x20, 0x3c, 0xcf, 0x28, 0x97, 0x6b, 0x6f, 0xf3, 0x9c,
	0x44, 0x66, 0x8a, 0x3e, 0x9e, 0xbf, 0xb9, 0x40, 0x25, 0xd0, 0x43, 0xe8, 0x9a, 0x41, 0x9b, 0xaa,
	0x64, 0x80, 0x17, 0x7f, 0x4f, 0x60, 0x92, 0xc8, 0x85, 0x8d, 0x19, 0x49, 0x89, 0x20, 0x33, 0x75,
	0xf7, 0x66, 0x60, 0x43, 0xff, 0x2b, 0xd8, 0xd5, 0x1d, 0xc7, 0x8c, 0x84, 0x82, 0x04, 0xe4, 0x97,
	0x82, 0x70, 0x71, 0xe3, 0xc5, 0xfe, 0x03, 0x18, 0xd8, 0x59, 0x75, 0x87, 0x65, 0x8d, 0x33, 0x67,
	0x8d, 0xff, 0x14, 0x46, 0xba, 0xe8, 0xc7, 0x3c, 0x66, 0xe1, 0xec, 0xf6, 0x4f, 0xff, 0xcb, 0x01,
	0xa4, 0xc1, 0xd3, 0x84, 0x8b, 0x72, 0x1d, 0x87, 0xb0, 0x41, 0x14, 0x2a, 0xdf, 0x4b, 0x6b, 0xaf,
	0x7f, 0x30, 0xc1, 0xab, 0x55, 0x06, 0xe2, 0x27, 0x54, 0xb0, 0xab, 0xc0, 0x36, 0x78, 0xdf, 0xdb,
	0x57, 0xad, 0x13, 0x68, 0x07, 0x5a, 0xef, 0xc9, 0x95, 0x19, 0x57, 0x1e, 0xd1, 0x43, 0xe8, 0x5c,
	0x86, 0x69, 0x41, 0xcc, 0x2a, 0xb7, 0x71, 0xf5, 0x65, 0x04, 0x3a, 0x7b, 0xd8, 0x7c, 0xe6, 0xf8,
	0x2f, 0x61, 0xf4, 0xd2, 0x90, 0xef, 0x4c, 0x84, 0x4c, 0xac, 0x59, 0x42, 0x85, 0xb8, 0xcd, 0x2a,
	0x71, 0xe5, 0xef, 0xec, 0x5b, 0x66, 0xdd, 0x45, 0x8e, 0x73, 0xb5, 0xb5, 0x2a, 0x6a, 0x43, 0xd0,
	0x0e, 0x59, 0xcc, 0xdd, 0xb6, 0x22, 0xba, 0x3a, 0xa3, 0x0f, 0x00, 0xf2, 0x8c, 0x89, 0x69, 0x94,
	0x15, 0x54, 0x28, 0x15, 0x76, 0x82, 0x9e, 0x44, 0x8e, 0x25, 0x20, 0x85, 0xa8, 0xd2, 0xaa, 0xaf,
	0xab, 0x05, 0x22, 0x81, 0x23, 0x16, 0x73, 0xff, 0x6f, 0x07, 0x06, 0x15, 0xe6, 0xa3, 0x11, 0x74,
	0x24, 0xa7, 0xec, 0x4f, 0xd4, 0x81, 0x7c, 0x08, 0x61, 0x2c, 0x63, 0xd3, 0x0b, 0x1e, 0x97, 0x0a,
	0x90, 0xc0, 0x6b, 0x1e, 0x97, 0x03, 0x70, 0xb9, 0x29, 0x35, 0xb0, 0x19, 0x40, 0xad, 0x0e, 0xfd,
	0x1f, 0xd4, 0x7d, 0x53, 0xb9, 0x9f, 0xb6, 0x4a, 0x6e, 0xc8, 0xf8, 0x84, 0xce, 0x6a, 0xb5, 0xd3,
	0xa9, 0xd7, 0xce, 0x33, 0x18, 0x99, 0x41, 0xab, 0x44, 0x9e, 0x54, 0xa8, 0xb6, 0x85, 0x17, 0xb6,
	0x6d, 0xb8, 0xf6, 0xb8, 0xec, 0x7c, 0xa1, 0x34, 0xb1, 0x8e, 0xd0, 0x1f, 0xc3, 0xff, 0x4c, 0xed,
	0x2b, 0xb2, 0xee, 0xa5, 0xfb, 0x05, 0x6c, 0x9b, 0xc2, 0x92, 0xbc, 0x37, 0x4e, 0x82, 0x1e, 0x2d,
	0x89, 0x79, 0xd9, 0x75, 0x6e, 0x56, 0xf3, 0x08, 0x90, 0x69, 0xd1, 0x8a, 0x50, 0x03, 0xfa, 0xff,
	0x38, 0xb0, 0x5b, 0x81, 0xcd, 0x44, 0x47, 0xd0, 0x33, 0x3e, 0x56, 0x0a, 0xea, 0x01, 0xae, 0x29,
	0xb4, 0x98, 0xd5, 0xd4, 0xbc, 0xcb, 0x7b, 0x03, 0xc3, 0x6a, 0xb2, 0x46, 0x57, 0x8f, 0xaa, 0xba,
	0xda, 0xc1, 0x4b, 0x9b, 0x59, 0x14, 0xd6, 0x04, 0xe0, 0x34, 0x8b, 0xd7, 0x6d, 0xf6, 0x23, 0xe8,
	0xab, 0x0a, 0xf3, 0x1b, 0x10, 0xb4, 0xd3, 0x84, 0x96, 0xea, 0x90, 0xe7, 0x83, 0x3f, 0x3b, 0xd6,
	0x77, 0x5e, 0x87, 0x34, 0x8c, 0x09, 0x3b, 0x23, 0xec, 0x32, 0x89, 0x08, 0x7a, 0x6a, 0x3d, 0x40,
	0x73, 0x04, 0x8d, 0x70, 0x8d, 0xf7, 0x79, 0xcb, 0xc2, 0xf7, 0x1b, 0xe8, 0x33, 0xdb, 0xa8, 0x29,
	0x82, 0x86, 0xb8, 0x62, 0x7e, 0x75, 0x2d, 0x18, 0x7a, 0x1a, 0x7b, 0x45, 0xc4, 0x6d, 0xea, 0xbf,
	0xb1, 0xdf, 0x65, 0xb9, 0x79, 0x74, 0x0f, 0xeb, 0x8f, 0x38, 0xb6, 0x1f, 0x71, 0x7c, 0x22, 0x3f,
	0xe2, 0xde, 0x6e, 0x8d, 0xe1, 0xf9, 0x0d, 0xf4, 0xb5, 0x75, 0x63, 0x63, 0xb4, 0x68, 0x8c, 0xeb,
	0x8c, 0xb7, 0xee, 0xde, 0xc7, 0x76, 0xce, 0xd3, 0x2c, 0x46, 0x7d, 0x3c, 0xdf, 0xbe, 0xb7, 0x85,
	0x17, 0x16, 0xed, 0x37, 0xf6, 0x1d, 0x74, 0x08, 0x7d, 0x5d, 0xfb, 0x73, 0x28, 0xa2, 0x77, 0xd7,
	0x0e, 0xb9, 0x7a, 0xcb, 0xbe, 0x83, 0xbe, 0x85, 0x41, 0xc5, 0x32, 0xd1, 0x18, 0xd7, 0x59, 0xa8,
	0x77, 0xcd, 0x43, 0xfd, 0x06, 0x7a, 0x0e, 0x3b, 0x65, 0xc7, 0xbb, 0x42, 0xcc, 0xb2, 0x5f, 0xe9,
	0xca, 0x62, 0xaf, 0xef, 0x3e, 0x82, 0x71, 0xe5, 0xbe, 0xe3, 0x30, 0x4d, 0xe5, 0x9f, 0x84, 0x3b,
	0x3c, 0xe2, 0x05, 0xb8, 0xcb, 0x03, 0xdc, 0xfd, 0x29, 0x07, 0xff, 0x36, 0x61, 0x6c, 0x14, 0xb0,
	0x44, 0xcf, 0xc3, 0xd2, 0x6c, 0x0d, 0x3f, 0xc7, 0xb8, 0xce, 0xd3, 0xbc, 0x15, 0x05, 0xf9, 0x8d,
	0x85, 0x5e, 0x43, 0xd1, 0xb2, 0xb7, 0xe2, 0x6a, 0xb5, 0xbd, 0x5f, 0x00, 0xcc, 0x5d, 0x0d, 0x21,
	0xbc, 0x62, 0x71, 0xd7, 0xdc, 0xd8, 0x5f, 0xf0, 0x0a, 0xb4, 0x8b, 0x57, 0x9d, 0xc7, 0x1b, 0xd5,
	0xd9, 0x89, 0xdf, 0x40, 0x9f, 0x96, 0x37, 0xde, 0x82, 0x75, 0xcf, 0x61, 0xcb, 0x14, 0xaf, 0xa7,
	0x5d, 0xcd, 0x90, 0xfb, 0xce, 0x79, 0x57, 0x55, 0x7d, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x15, 0x0b, 0x68, 0x23, 0x21, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EngineManagerServiceClient is the client API for EngineManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineManagerServiceClient interface {
	EngineCreate(ctx context.Context, in *EngineCreateRequest, opts ...grpc.CallOption) (*EngineResponse, error)
	EngineDelete(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*EngineResponse, error)
	EngineGet(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*EngineResponse, error)
	EngineList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EngineListResponse, error)
	EngineUpgrade(ctx context.Context, in *EngineUpgradeRequest, opts ...grpc.CallOption) (*EngineResponse, error)
	EngineLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (EngineManagerService_EngineLogClient, error)
	EngineWatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EngineManagerService_EngineWatchClient, error)
	FrontendStart(ctx context.Context, in *FrontendStartRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	FrontendShutdown(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	FrontendStartCallback(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	FrontendShutdownCallback(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type engineManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewEngineManagerServiceClient(cc *grpc.ClientConn) EngineManagerServiceClient {
	return &engineManagerServiceClient{cc}
}

func (c *engineManagerServiceClient) EngineCreate(ctx context.Context, in *EngineCreateRequest, opts ...grpc.CallOption) (*EngineResponse, error) {
	out := new(EngineResponse)
	err := c.cc.Invoke(ctx, "/EngineManagerService/EngineCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineManagerServiceClient) EngineDelete(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*EngineResponse, error) {
	out := new(EngineResponse)
	err := c.cc.Invoke(ctx, "/EngineManagerService/EngineDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineManagerServiceClient) EngineGet(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*EngineResponse, error) {
	out := new(EngineResponse)
	err := c.cc.Invoke(ctx, "/EngineManagerService/EngineGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineManagerServiceClient) EngineList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EngineListResponse, error) {
	out := new(EngineListResponse)
	err := c.cc.Invoke(ctx, "/EngineManagerService/EngineList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineManagerServiceClient) EngineUpgrade(ctx context.Context, in *EngineUpgradeRequest, opts ...grpc.CallOption) (*EngineResponse, error) {
	out := new(EngineResponse)
	err := c.cc.Invoke(ctx, "/EngineManagerService/EngineUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineManagerServiceClient) EngineLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (EngineManagerService_EngineLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EngineManagerService_serviceDesc.Streams[0], "/EngineManagerService/EngineLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineManagerServiceEngineLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EngineManagerService_EngineLogClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type engineManagerServiceEngineLogClient struct {
	grpc.ClientStream
}

func (x *engineManagerServiceEngineLogClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineManagerServiceClient) EngineWatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EngineManagerService_EngineWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EngineManagerService_serviceDesc.Streams[1], "/EngineManagerService/EngineWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineManagerServiceEngineWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EngineManagerService_EngineWatchClient interface {
	Recv() (*EngineResponse, error)
	grpc.ClientStream
}

type engineManagerServiceEngineWatchClient struct {
	grpc.ClientStream
}

func (x *engineManagerServiceEngineWatchClient) Recv() (*EngineResponse, error) {
	m := new(EngineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineManagerServiceClient) FrontendStart(ctx context.Context, in *FrontendStartRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/EngineManagerService/FrontendStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineManagerServiceClient) FrontendShutdown(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/EngineManagerService/FrontendShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineManagerServiceClient) FrontendStartCallback(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/EngineManagerService/FrontendStartCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineManagerServiceClient) FrontendShutdownCallback(ctx context.Context, in *EngineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/EngineManagerService/FrontendShutdownCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineManagerServiceServer is the server API for EngineManagerService service.
type EngineManagerServiceServer interface {
	EngineCreate(context.Context, *EngineCreateRequest) (*EngineResponse, error)
	EngineDelete(context.Context, *EngineRequest) (*EngineResponse, error)
	EngineGet(context.Context, *EngineRequest) (*EngineResponse, error)
	EngineList(context.Context, *empty.Empty) (*EngineListResponse, error)
	EngineUpgrade(context.Context, *EngineUpgradeRequest) (*EngineResponse, error)
	EngineLog(*LogRequest, EngineManagerService_EngineLogServer) error
	EngineWatch(*empty.Empty, EngineManagerService_EngineWatchServer) error
	FrontendStart(context.Context, *FrontendStartRequest) (*empty.Empty, error)
	FrontendShutdown(context.Context, *EngineRequest) (*empty.Empty, error)
	FrontendStartCallback(context.Context, *EngineRequest) (*empty.Empty, error)
	FrontendShutdownCallback(context.Context, *EngineRequest) (*empty.Empty, error)
}

// UnimplementedEngineManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEngineManagerServiceServer struct {
}

func (*UnimplementedEngineManagerServiceServer) EngineCreate(ctx context.Context, req *EngineCreateRequest) (*EngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineCreate not implemented")
}
func (*UnimplementedEngineManagerServiceServer) EngineDelete(ctx context.Context, req *EngineRequest) (*EngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineDelete not implemented")
}
func (*UnimplementedEngineManagerServiceServer) EngineGet(ctx context.Context, req *EngineRequest) (*EngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineGet not implemented")
}
func (*UnimplementedEngineManagerServiceServer) EngineList(ctx context.Context, req *empty.Empty) (*EngineListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineList not implemented")
}
func (*UnimplementedEngineManagerServiceServer) EngineUpgrade(ctx context.Context, req *EngineUpgradeRequest) (*EngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineUpgrade not implemented")
}
func (*UnimplementedEngineManagerServiceServer) EngineLog(req *LogRequest, srv EngineManagerService_EngineLogServer) error {
	return status.Errorf(codes.Unimplemented, "method EngineLog not implemented")
}
func (*UnimplementedEngineManagerServiceServer) EngineWatch(req *empty.Empty, srv EngineManagerService_EngineWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method EngineWatch not implemented")
}
func (*UnimplementedEngineManagerServiceServer) FrontendStart(ctx context.Context, req *FrontendStartRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendStart not implemented")
}
func (*UnimplementedEngineManagerServiceServer) FrontendShutdown(ctx context.Context, req *EngineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendShutdown not implemented")
}
func (*UnimplementedEngineManagerServiceServer) FrontendStartCallback(ctx context.Context, req *EngineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendStartCallback not implemented")
}
func (*UnimplementedEngineManagerServiceServer) FrontendShutdownCallback(ctx context.Context, req *EngineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendShutdownCallback not implemented")
}

func RegisterEngineManagerServiceServer(s *grpc.Server, srv EngineManagerServiceServer) {
	s.RegisterService(&_EngineManagerService_serviceDesc, srv)
}

func _EngineManagerService_EngineCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).EngineCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/EngineCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).EngineCreate(ctx, req.(*EngineCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineManagerService_EngineDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).EngineDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/EngineDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).EngineDelete(ctx, req.(*EngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineManagerService_EngineGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).EngineGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/EngineGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).EngineGet(ctx, req.(*EngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineManagerService_EngineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).EngineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/EngineList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).EngineList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineManagerService_EngineUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).EngineUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/EngineUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).EngineUpgrade(ctx, req.(*EngineUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineManagerService_EngineLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineManagerServiceServer).EngineLog(m, &engineManagerServiceEngineLogServer{stream})
}

type EngineManagerService_EngineLogServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type engineManagerServiceEngineLogServer struct {
	grpc.ServerStream
}

func (x *engineManagerServiceEngineLogServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EngineManagerService_EngineWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineManagerServiceServer).EngineWatch(m, &engineManagerServiceEngineWatchServer{stream})
}

type EngineManagerService_EngineWatchServer interface {
	Send(*EngineResponse) error
	grpc.ServerStream
}

type engineManagerServiceEngineWatchServer struct {
	grpc.ServerStream
}

func (x *engineManagerServiceEngineWatchServer) Send(m *EngineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EngineManagerService_FrontendStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).FrontendStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/FrontendStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).FrontendStart(ctx, req.(*FrontendStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineManagerService_FrontendShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).FrontendShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/FrontendShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).FrontendShutdown(ctx, req.(*EngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineManagerService_FrontendStartCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).FrontendStartCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/FrontendStartCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).FrontendStartCallback(ctx, req.(*EngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineManagerService_FrontendShutdownCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineManagerServiceServer).FrontendShutdownCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EngineManagerService/FrontendShutdownCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineManagerServiceServer).FrontendShutdownCallback(ctx, req.(*EngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EngineManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EngineManagerService",
	HandlerType: (*EngineManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EngineCreate",
			Handler:    _EngineManagerService_EngineCreate_Handler,
		},
		{
			MethodName: "EngineDelete",
			Handler:    _EngineManagerService_EngineDelete_Handler,
		},
		{
			MethodName: "EngineGet",
			Handler:    _EngineManagerService_EngineGet_Handler,
		},
		{
			MethodName: "EngineList",
			Handler:    _EngineManagerService_EngineList_Handler,
		},
		{
			MethodName: "EngineUpgrade",
			Handler:    _EngineManagerService_EngineUpgrade_Handler,
		},
		{
			MethodName: "FrontendStart",
			Handler:    _EngineManagerService_FrontendStart_Handler,
		},
		{
			MethodName: "FrontendShutdown",
			Handler:    _EngineManagerService_FrontendShutdown_Handler,
		},
		{
			MethodName: "FrontendStartCallback",
			Handler:    _EngineManagerService_FrontendStartCallback_Handler,
		},
		{
			MethodName: "FrontendShutdownCallback",
			Handler:    _EngineManagerService_FrontendShutdownCallback_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EngineLog",
			Handler:       _EngineManagerService_EngineLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EngineWatch",
			Handler:       _EngineManagerService_EngineWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// ProcessManagerServiceClient is the client API for ProcessManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessManagerServiceClient interface {
	ProcessCreate(ctx context.Context, in *ProcessCreateRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	ProcessDelete(ctx context.Context, in *ProcessDeleteRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	ProcessGet(ctx context.Context, in *ProcessGetRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	ProcessList(ctx context.Context, in *ProcessListRequest, opts ...grpc.CallOption) (*ProcessListResponse, error)
	ProcessLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (ProcessManagerService_ProcessLogClient, error)
	ProcessWatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ProcessManagerService_ProcessWatchClient, error)
}

type processManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewProcessManagerServiceClient(cc *grpc.ClientConn) ProcessManagerServiceClient {
	return &processManagerServiceClient{cc}
}

func (c *processManagerServiceClient) ProcessCreate(ctx context.Context, in *ProcessCreateRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/ProcessManagerService/ProcessCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerServiceClient) ProcessDelete(ctx context.Context, in *ProcessDeleteRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/ProcessManagerService/ProcessDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerServiceClient) ProcessGet(ctx context.Context, in *ProcessGetRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/ProcessManagerService/ProcessGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerServiceClient) ProcessList(ctx context.Context, in *ProcessListRequest, opts ...grpc.CallOption) (*ProcessListResponse, error) {
	out := new(ProcessListResponse)
	err := c.cc.Invoke(ctx, "/ProcessManagerService/ProcessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerServiceClient) ProcessLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (ProcessManagerService_ProcessLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessManagerService_serviceDesc.Streams[0], "/ProcessManagerService/ProcessLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &processManagerServiceProcessLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessManagerService_ProcessLogClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type processManagerServiceProcessLogClient struct {
	grpc.ClientStream
}

func (x *processManagerServiceProcessLogClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processManagerServiceClient) ProcessWatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ProcessManagerService_ProcessWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessManagerService_serviceDesc.Streams[1], "/ProcessManagerService/ProcessWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &processManagerServiceProcessWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessManagerService_ProcessWatchClient interface {
	Recv() (*ProcessResponse, error)
	grpc.ClientStream
}

type processManagerServiceProcessWatchClient struct {
	grpc.ClientStream
}

func (x *processManagerServiceProcessWatchClient) Recv() (*ProcessResponse, error) {
	m := new(ProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessManagerServiceServer is the server API for ProcessManagerService service.
type ProcessManagerServiceServer interface {
	ProcessCreate(context.Context, *ProcessCreateRequest) (*ProcessResponse, error)
	ProcessDelete(context.Context, *ProcessDeleteRequest) (*ProcessResponse, error)
	ProcessGet(context.Context, *ProcessGetRequest) (*ProcessResponse, error)
	ProcessList(context.Context, *ProcessListRequest) (*ProcessListResponse, error)
	ProcessLog(*LogRequest, ProcessManagerService_ProcessLogServer) error
	ProcessWatch(*empty.Empty, ProcessManagerService_ProcessWatchServer) error
}

// UnimplementedProcessManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProcessManagerServiceServer struct {
}

func (*UnimplementedProcessManagerServiceServer) ProcessCreate(ctx context.Context, req *ProcessCreateRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCreate not implemented")
}
func (*UnimplementedProcessManagerServiceServer) ProcessDelete(ctx context.Context, req *ProcessDeleteRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDelete not implemented")
}
func (*UnimplementedProcessManagerServiceServer) ProcessGet(ctx context.Context, req *ProcessGetRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessGet not implemented")
}
func (*UnimplementedProcessManagerServiceServer) ProcessList(ctx context.Context, req *ProcessListRequest) (*ProcessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessList not implemented")
}
func (*UnimplementedProcessManagerServiceServer) ProcessLog(req *LogRequest, srv ProcessManagerService_ProcessLogServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessLog not implemented")
}
func (*UnimplementedProcessManagerServiceServer) ProcessWatch(req *empty.Empty, srv ProcessManagerService_ProcessWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessWatch not implemented")
}

func RegisterProcessManagerServiceServer(s *grpc.Server, srv ProcessManagerServiceServer) {
	s.RegisterService(&_ProcessManagerService_serviceDesc, srv)
}

func _ProcessManagerService_ProcessCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServiceServer).ProcessCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProcessManagerService/ProcessCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServiceServer).ProcessCreate(ctx, req.(*ProcessCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManagerService_ProcessDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServiceServer).ProcessDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProcessManagerService/ProcessDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServiceServer).ProcessDelete(ctx, req.(*ProcessDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManagerService_ProcessGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServiceServer).ProcessGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProcessManagerService/ProcessGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServiceServer).ProcessGet(ctx, req.(*ProcessGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManagerService_ProcessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServiceServer).ProcessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProcessManagerService/ProcessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServiceServer).ProcessList(ctx, req.(*ProcessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManagerService_ProcessLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessManagerServiceServer).ProcessLog(m, &processManagerServiceProcessLogServer{stream})
}

type ProcessManagerService_ProcessLogServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type processManagerServiceProcessLogServer struct {
	grpc.ServerStream
}

func (x *processManagerServiceProcessLogServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessManagerService_ProcessWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessManagerServiceServer).ProcessWatch(m, &processManagerServiceProcessWatchServer{stream})
}

type ProcessManagerService_ProcessWatchServer interface {
	Send(*ProcessResponse) error
	grpc.ServerStream
}

type processManagerServiceProcessWatchServer struct {
	grpc.ServerStream
}

func (x *processManagerServiceProcessWatchServer) Send(m *ProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ProcessManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ProcessManagerService",
	HandlerType: (*ProcessManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessCreate",
			Handler:    _ProcessManagerService_ProcessCreate_Handler,
		},
		{
			MethodName: "ProcessDelete",
			Handler:    _ProcessManagerService_ProcessDelete_Handler,
		},
		{
			MethodName: "ProcessGet",
			Handler:    _ProcessManagerService_ProcessGet_Handler,
		},
		{
			MethodName: "ProcessList",
			Handler:    _ProcessManagerService_ProcessList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessLog",
			Handler:       _ProcessManagerService_ProcessLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessWatch",
			Handler:       _ProcessManagerService_ProcessWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
