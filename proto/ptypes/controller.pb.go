// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

package ptypes

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReplicaMode int32

const (
	ReplicaMode_WO  ReplicaMode = 0
	ReplicaMode_RW  ReplicaMode = 1
	ReplicaMode_ERR ReplicaMode = 2
)

var ReplicaMode_name = map[int32]string{
	0: "WO",
	1: "RW",
	2: "ERR",
}

var ReplicaMode_value = map[string]int32{
	"WO":  0,
	"RW":  1,
	"ERR": 2,
}

func (x ReplicaMode) String() string {
	return proto.EnumName(ReplicaMode_name, int32(x))
}

func (ReplicaMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}

type Volume struct {
	Name                      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                      int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ReplicaCount              int32    `protobuf:"varint,3,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	Endpoint                  string   `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Frontend                  string   `protobuf:"bytes,5,opt,name=frontend,proto3" json:"frontend,omitempty"`
	FrontendState             string   `protobuf:"bytes,6,opt,name=frontendState,proto3" json:"frontendState,omitempty"`
	IsExpanding               bool     `protobuf:"varint,7,opt,name=isExpanding,proto3" json:"isExpanding,omitempty"`
	LastExpansionError        string   `protobuf:"bytes,8,opt,name=last_expansion_error,json=lastExpansionError,proto3" json:"last_expansion_error,omitempty"`
	LastExpansionFailedAt     string   `protobuf:"bytes,9,opt,name=last_expansion_failed_at,json=lastExpansionFailedAt,proto3" json:"last_expansion_failed_at,omitempty"`
	UnmapMarkSnapChainRemoved bool     `protobuf:"varint,10,opt,name=unmap_mark_snap_chain_removed,json=unmapMarkSnapChainRemoved,proto3" json:"unmap_mark_snap_chain_removed,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}

func (m *Volume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume.Unmarshal(m, b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume.Marshal(b, m, deterministic)
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return xxx_messageInfo_Volume.Size(m)
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Volume) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *Volume) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Volume) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

func (m *Volume) GetFrontendState() string {
	if m != nil {
		return m.FrontendState
	}
	return ""
}

func (m *Volume) GetIsExpanding() bool {
	if m != nil {
		return m.IsExpanding
	}
	return false
}

func (m *Volume) GetLastExpansionError() string {
	if m != nil {
		return m.LastExpansionError
	}
	return ""
}

func (m *Volume) GetLastExpansionFailedAt() string {
	if m != nil {
		return m.LastExpansionFailedAt
	}
	return ""
}

func (m *Volume) GetUnmapMarkSnapChainRemoved() bool {
	if m != nil {
		return m.UnmapMarkSnapChainRemoved
	}
	return false
}

type ReplicaAddress struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicaAddress) Reset()         { *m = ReplicaAddress{} }
func (m *ReplicaAddress) String() string { return proto.CompactTextString(m) }
func (*ReplicaAddress) ProtoMessage()    {}
func (*ReplicaAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}

func (m *ReplicaAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaAddress.Unmarshal(m, b)
}
func (m *ReplicaAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaAddress.Marshal(b, m, deterministic)
}
func (m *ReplicaAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaAddress.Merge(m, src)
}
func (m *ReplicaAddress) XXX_Size() int {
	return xxx_messageInfo_ReplicaAddress.Size(m)
}
func (m *ReplicaAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaAddress proto.InternalMessageInfo

func (m *ReplicaAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ControllerReplica struct {
	Address              *ReplicaAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Mode                 ReplicaMode     `protobuf:"varint,2,opt,name=mode,proto3,enum=ptypes.ReplicaMode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ControllerReplica) Reset()         { *m = ControllerReplica{} }
func (m *ControllerReplica) String() string { return proto.CompactTextString(m) }
func (*ControllerReplica) ProtoMessage()    {}
func (*ControllerReplica) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{2}
}

func (m *ControllerReplica) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerReplica.Unmarshal(m, b)
}
func (m *ControllerReplica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerReplica.Marshal(b, m, deterministic)
}
func (m *ControllerReplica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerReplica.Merge(m, src)
}
func (m *ControllerReplica) XXX_Size() int {
	return xxx_messageInfo_ControllerReplica.Size(m)
}
func (m *ControllerReplica) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerReplica.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerReplica proto.InternalMessageInfo

func (m *ControllerReplica) GetAddress() *ReplicaAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ControllerReplica) GetMode() ReplicaMode {
	if m != nil {
		return m.Mode
	}
	return ReplicaMode_WO
}

type VolumeStartRequest struct {
	ReplicaAddresses     []string `protobuf:"bytes,1,rep,name=replicaAddresses,proto3" json:"replicaAddresses,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	CurrentSize          int64    `protobuf:"varint,3,opt,name=currentSize,proto3" json:"currentSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeStartRequest) Reset()         { *m = VolumeStartRequest{} }
func (m *VolumeStartRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeStartRequest) ProtoMessage()    {}
func (*VolumeStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{3}
}

func (m *VolumeStartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeStartRequest.Unmarshal(m, b)
}
func (m *VolumeStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeStartRequest.Marshal(b, m, deterministic)
}
func (m *VolumeStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeStartRequest.Merge(m, src)
}
func (m *VolumeStartRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeStartRequest.Size(m)
}
func (m *VolumeStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeStartRequest proto.InternalMessageInfo

func (m *VolumeStartRequest) GetReplicaAddresses() []string {
	if m != nil {
		return m.ReplicaAddresses
	}
	return nil
}

func (m *VolumeStartRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *VolumeStartRequest) GetCurrentSize() int64 {
	if m != nil {
		return m.CurrentSize
	}
	return 0
}

type VolumeSnapshotRequest struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VolumeSnapshotRequest) Reset()         { *m = VolumeSnapshotRequest{} }
func (m *VolumeSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeSnapshotRequest) ProtoMessage()    {}
func (*VolumeSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{4}
}

func (m *VolumeSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeSnapshotRequest.Unmarshal(m, b)
}
func (m *VolumeSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *VolumeSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeSnapshotRequest.Merge(m, src)
}
func (m *VolumeSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeSnapshotRequest.Size(m)
}
func (m *VolumeSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeSnapshotRequest proto.InternalMessageInfo

func (m *VolumeSnapshotRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeSnapshotRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type VolumeSnapshotReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeSnapshotReply) Reset()         { *m = VolumeSnapshotReply{} }
func (m *VolumeSnapshotReply) String() string { return proto.CompactTextString(m) }
func (*VolumeSnapshotReply) ProtoMessage()    {}
func (*VolumeSnapshotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{5}
}

func (m *VolumeSnapshotReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeSnapshotReply.Unmarshal(m, b)
}
func (m *VolumeSnapshotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeSnapshotReply.Marshal(b, m, deterministic)
}
func (m *VolumeSnapshotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeSnapshotReply.Merge(m, src)
}
func (m *VolumeSnapshotReply) XXX_Size() int {
	return xxx_messageInfo_VolumeSnapshotReply.Size(m)
}
func (m *VolumeSnapshotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeSnapshotReply.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeSnapshotReply proto.InternalMessageInfo

func (m *VolumeSnapshotReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VolumeRevertRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeRevertRequest) Reset()         { *m = VolumeRevertRequest{} }
func (m *VolumeRevertRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeRevertRequest) ProtoMessage()    {}
func (*VolumeRevertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{6}
}

func (m *VolumeRevertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeRevertRequest.Unmarshal(m, b)
}
func (m *VolumeRevertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeRevertRequest.Marshal(b, m, deterministic)
}
func (m *VolumeRevertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeRevertRequest.Merge(m, src)
}
func (m *VolumeRevertRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeRevertRequest.Size(m)
}
func (m *VolumeRevertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeRevertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeRevertRequest proto.InternalMessageInfo

func (m *VolumeRevertRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VolumeExpandRequest struct {
	Size                 int64    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeExpandRequest) Reset()         { *m = VolumeExpandRequest{} }
func (m *VolumeExpandRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeExpandRequest) ProtoMessage()    {}
func (*VolumeExpandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{7}
}

func (m *VolumeExpandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeExpandRequest.Unmarshal(m, b)
}
func (m *VolumeExpandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeExpandRequest.Marshal(b, m, deterministic)
}
func (m *VolumeExpandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeExpandRequest.Merge(m, src)
}
func (m *VolumeExpandRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeExpandRequest.Size(m)
}
func (m *VolumeExpandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeExpandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeExpandRequest proto.InternalMessageInfo

func (m *VolumeExpandRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type VolumeFrontendStartRequest struct {
	Frontend             string   `protobuf:"bytes,1,opt,name=frontend,proto3" json:"frontend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeFrontendStartRequest) Reset()         { *m = VolumeFrontendStartRequest{} }
func (m *VolumeFrontendStartRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeFrontendStartRequest) ProtoMessage()    {}
func (*VolumeFrontendStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{8}
}

func (m *VolumeFrontendStartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeFrontendStartRequest.Unmarshal(m, b)
}
func (m *VolumeFrontendStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeFrontendStartRequest.Marshal(b, m, deterministic)
}
func (m *VolumeFrontendStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeFrontendStartRequest.Merge(m, src)
}
func (m *VolumeFrontendStartRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeFrontendStartRequest.Size(m)
}
func (m *VolumeFrontendStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeFrontendStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeFrontendStartRequest proto.InternalMessageInfo

func (m *VolumeFrontendStartRequest) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

type VolumeUnmapMarkSnapChainRemovedSetRequest struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeUnmapMarkSnapChainRemovedSetRequest) Reset() {
	*m = VolumeUnmapMarkSnapChainRemovedSetRequest{}
}
func (m *VolumeUnmapMarkSnapChainRemovedSetRequest) String() string {
	return proto.CompactTextString(m)
}
func (*VolumeUnmapMarkSnapChainRemovedSetRequest) ProtoMessage() {}
func (*VolumeUnmapMarkSnapChainRemovedSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{9}
}

func (m *VolumeUnmapMarkSnapChainRemovedSetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeUnmapMarkSnapChainRemovedSetRequest.Unmarshal(m, b)
}
func (m *VolumeUnmapMarkSnapChainRemovedSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeUnmapMarkSnapChainRemovedSetRequest.Marshal(b, m, deterministic)
}
func (m *VolumeUnmapMarkSnapChainRemovedSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeUnmapMarkSnapChainRemovedSetRequest.Merge(m, src)
}
func (m *VolumeUnmapMarkSnapChainRemovedSetRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeUnmapMarkSnapChainRemovedSetRequest.Size(m)
}
func (m *VolumeUnmapMarkSnapChainRemovedSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeUnmapMarkSnapChainRemovedSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeUnmapMarkSnapChainRemovedSetRequest proto.InternalMessageInfo

func (m *VolumeUnmapMarkSnapChainRemovedSetRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type VolumePrepareRestoreRequest struct {
	LastRestored         string   `protobuf:"bytes,1,opt,name=lastRestored,proto3" json:"lastRestored,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumePrepareRestoreRequest) Reset()         { *m = VolumePrepareRestoreRequest{} }
func (m *VolumePrepareRestoreRequest) String() string { return proto.CompactTextString(m) }
func (*VolumePrepareRestoreRequest) ProtoMessage()    {}
func (*VolumePrepareRestoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{10}
}

func (m *VolumePrepareRestoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumePrepareRestoreRequest.Unmarshal(m, b)
}
func (m *VolumePrepareRestoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumePrepareRestoreRequest.Marshal(b, m, deterministic)
}
func (m *VolumePrepareRestoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumePrepareRestoreRequest.Merge(m, src)
}
func (m *VolumePrepareRestoreRequest) XXX_Size() int {
	return xxx_messageInfo_VolumePrepareRestoreRequest.Size(m)
}
func (m *VolumePrepareRestoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumePrepareRestoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumePrepareRestoreRequest proto.InternalMessageInfo

func (m *VolumePrepareRestoreRequest) GetLastRestored() string {
	if m != nil {
		return m.LastRestored
	}
	return ""
}

type VolumeFinishRestoreRequest struct {
	CurrentRestored      string   `protobuf:"bytes,1,opt,name=currentRestored,proto3" json:"currentRestored,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeFinishRestoreRequest) Reset()         { *m = VolumeFinishRestoreRequest{} }
func (m *VolumeFinishRestoreRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeFinishRestoreRequest) ProtoMessage()    {}
func (*VolumeFinishRestoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{11}
}

func (m *VolumeFinishRestoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeFinishRestoreRequest.Unmarshal(m, b)
}
func (m *VolumeFinishRestoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeFinishRestoreRequest.Marshal(b, m, deterministic)
}
func (m *VolumeFinishRestoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeFinishRestoreRequest.Merge(m, src)
}
func (m *VolumeFinishRestoreRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeFinishRestoreRequest.Size(m)
}
func (m *VolumeFinishRestoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeFinishRestoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeFinishRestoreRequest proto.InternalMessageInfo

func (m *VolumeFinishRestoreRequest) GetCurrentRestored() string {
	if m != nil {
		return m.CurrentRestored
	}
	return ""
}

type ReplicaListReply struct {
	Replicas             []*ControllerReplica `protobuf:"bytes,1,rep,name=replicas,proto3" json:"replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReplicaListReply) Reset()         { *m = ReplicaListReply{} }
func (m *ReplicaListReply) String() string { return proto.CompactTextString(m) }
func (*ReplicaListReply) ProtoMessage()    {}
func (*ReplicaListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{12}
}

func (m *ReplicaListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaListReply.Unmarshal(m, b)
}
func (m *ReplicaListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaListReply.Marshal(b, m, deterministic)
}
func (m *ReplicaListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaListReply.Merge(m, src)
}
func (m *ReplicaListReply) XXX_Size() int {
	return xxx_messageInfo_ReplicaListReply.Size(m)
}
func (m *ReplicaListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaListReply proto.InternalMessageInfo

func (m *ReplicaListReply) GetReplicas() []*ControllerReplica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type ControllerReplicaCreateRequest struct {
	Address              string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SnapshotRequired     bool        `protobuf:"varint,2,opt,name=snapshot_required,json=snapshotRequired,proto3" json:"snapshot_required,omitempty"`
	Mode                 ReplicaMode `protobuf:"varint,3,opt,name=mode,proto3,enum=ptypes.ReplicaMode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ControllerReplicaCreateRequest) Reset()         { *m = ControllerReplicaCreateRequest{} }
func (m *ControllerReplicaCreateRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerReplicaCreateRequest) ProtoMessage()    {}
func (*ControllerReplicaCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{13}
}

func (m *ControllerReplicaCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerReplicaCreateRequest.Unmarshal(m, b)
}
func (m *ControllerReplicaCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerReplicaCreateRequest.Marshal(b, m, deterministic)
}
func (m *ControllerReplicaCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerReplicaCreateRequest.Merge(m, src)
}
func (m *ControllerReplicaCreateRequest) XXX_Size() int {
	return xxx_messageInfo_ControllerReplicaCreateRequest.Size(m)
}
func (m *ControllerReplicaCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerReplicaCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerReplicaCreateRequest proto.InternalMessageInfo

func (m *ControllerReplicaCreateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ControllerReplicaCreateRequest) GetSnapshotRequired() bool {
	if m != nil {
		return m.SnapshotRequired
	}
	return false
}

func (m *ControllerReplicaCreateRequest) GetMode() ReplicaMode {
	if m != nil {
		return m.Mode
	}
	return ReplicaMode_WO
}

type ReplicaPrepareRebuildReply struct {
	Replica              *ControllerReplica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
	SyncFileInfoList     []*SyncFileInfo    `protobuf:"bytes,2,rep,name=sync_file_info_list,json=syncFileInfoList,proto3" json:"sync_file_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ReplicaPrepareRebuildReply) Reset()         { *m = ReplicaPrepareRebuildReply{} }
func (m *ReplicaPrepareRebuildReply) String() string { return proto.CompactTextString(m) }
func (*ReplicaPrepareRebuildReply) ProtoMessage()    {}
func (*ReplicaPrepareRebuildReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{14}
}

func (m *ReplicaPrepareRebuildReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaPrepareRebuildReply.Unmarshal(m, b)
}
func (m *ReplicaPrepareRebuildReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaPrepareRebuildReply.Marshal(b, m, deterministic)
}
func (m *ReplicaPrepareRebuildReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaPrepareRebuildReply.Merge(m, src)
}
func (m *ReplicaPrepareRebuildReply) XXX_Size() int {
	return xxx_messageInfo_ReplicaPrepareRebuildReply.Size(m)
}
func (m *ReplicaPrepareRebuildReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaPrepareRebuildReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaPrepareRebuildReply proto.InternalMessageInfo

func (m *ReplicaPrepareRebuildReply) GetReplica() *ControllerReplica {
	if m != nil {
		return m.Replica
	}
	return nil
}

func (m *ReplicaPrepareRebuildReply) GetSyncFileInfoList() []*SyncFileInfo {
	if m != nil {
		return m.SyncFileInfoList
	}
	return nil
}

type JournalListRequest struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JournalListRequest) Reset()         { *m = JournalListRequest{} }
func (m *JournalListRequest) String() string { return proto.CompactTextString(m) }
func (*JournalListRequest) ProtoMessage()    {}
func (*JournalListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{15}
}

func (m *JournalListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JournalListRequest.Unmarshal(m, b)
}
func (m *JournalListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JournalListRequest.Marshal(b, m, deterministic)
}
func (m *JournalListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JournalListRequest.Merge(m, src)
}
func (m *JournalListRequest) XXX_Size() int {
	return xxx_messageInfo_JournalListRequest.Size(m)
}
func (m *JournalListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JournalListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JournalListRequest proto.InternalMessageInfo

func (m *JournalListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type VersionOutput struct {
	Version                 string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GitCommit               string   `protobuf:"bytes,2,opt,name=gitCommit,proto3" json:"gitCommit,omitempty"`
	BuildDate               string   `protobuf:"bytes,3,opt,name=buildDate,proto3" json:"buildDate,omitempty"`
	CliAPIVersion           int64    `protobuf:"varint,4,opt,name=cliAPIVersion,proto3" json:"cliAPIVersion,omitempty"`
	CliAPIMinVersion        int64    `protobuf:"varint,5,opt,name=cliAPIMinVersion,proto3" json:"cliAPIMinVersion,omitempty"`
	ControllerAPIVersion    int64    `protobuf:"varint,6,opt,name=controllerAPIVersion,proto3" json:"controllerAPIVersion,omitempty"`
	ControllerAPIMinVersion int64    `protobuf:"varint,7,opt,name=controllerAPIMinVersion,proto3" json:"controllerAPIMinVersion,omitempty"`
	DataFormatVersion       int64    `protobuf:"varint,8,opt,name=dataFormatVersion,proto3" json:"dataFormatVersion,omitempty"`
	DataFormatMinVersion    int64    `protobuf:"varint,9,opt,name=dataFormatMinVersion,proto3" json:"dataFormatMinVersion,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *VersionOutput) Reset()         { *m = VersionOutput{} }
func (m *VersionOutput) String() string { return proto.CompactTextString(m) }
func (*VersionOutput) ProtoMessage()    {}
func (*VersionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{16}
}

func (m *VersionOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionOutput.Unmarshal(m, b)
}
func (m *VersionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionOutput.Marshal(b, m, deterministic)
}
func (m *VersionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionOutput.Merge(m, src)
}
func (m *VersionOutput) XXX_Size() int {
	return xxx_messageInfo_VersionOutput.Size(m)
}
func (m *VersionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_VersionOutput proto.InternalMessageInfo

func (m *VersionOutput) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionOutput) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionOutput) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *VersionOutput) GetCliAPIVersion() int64 {
	if m != nil {
		return m.CliAPIVersion
	}
	return 0
}

func (m *VersionOutput) GetCliAPIMinVersion() int64 {
	if m != nil {
		return m.CliAPIMinVersion
	}
	return 0
}

func (m *VersionOutput) GetControllerAPIVersion() int64 {
	if m != nil {
		return m.ControllerAPIVersion
	}
	return 0
}

func (m *VersionOutput) GetControllerAPIMinVersion() int64 {
	if m != nil {
		return m.ControllerAPIMinVersion
	}
	return 0
}

func (m *VersionOutput) GetDataFormatVersion() int64 {
	if m != nil {
		return m.DataFormatVersion
	}
	return 0
}

func (m *VersionOutput) GetDataFormatMinVersion() int64 {
	if m != nil {
		return m.DataFormatMinVersion
	}
	return 0
}

type VersionDetailGetReply struct {
	Version              *VersionOutput `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VersionDetailGetReply) Reset()         { *m = VersionDetailGetReply{} }
func (m *VersionDetailGetReply) String() string { return proto.CompactTextString(m) }
func (*VersionDetailGetReply) ProtoMessage()    {}
func (*VersionDetailGetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{17}
}

func (m *VersionDetailGetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionDetailGetReply.Unmarshal(m, b)
}
func (m *VersionDetailGetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionDetailGetReply.Marshal(b, m, deterministic)
}
func (m *VersionDetailGetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionDetailGetReply.Merge(m, src)
}
func (m *VersionDetailGetReply) XXX_Size() int {
	return xxx_messageInfo_VersionDetailGetReply.Size(m)
}
func (m *VersionDetailGetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionDetailGetReply.DiscardUnknown(m)
}

var xxx_messageInfo_VersionDetailGetReply proto.InternalMessageInfo

func (m *VersionDetailGetReply) GetVersion() *VersionOutput {
	if m != nil {
		return m.Version
	}
	return nil
}

type Metric struct {
	ReadBandwidth        uint64   `protobuf:"varint,1,opt,name=readBandwidth,proto3" json:"readBandwidth,omitempty"`
	WriteBandwidth       uint64   `protobuf:"varint,2,opt,name=writeBandwidth,proto3" json:"writeBandwidth,omitempty"`
	ReadLatency          uint64   `protobuf:"varint,3,opt,name=readLatency,proto3" json:"readLatency,omitempty"`
	WriteLatency         uint64   `protobuf:"varint,4,opt,name=writeLatency,proto3" json:"writeLatency,omitempty"`
	IOPS                 uint64   `protobuf:"varint,5,opt,name=iOPS,proto3" json:"iOPS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{18}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetReadBandwidth() uint64 {
	if m != nil {
		return m.ReadBandwidth
	}
	return 0
}

func (m *Metric) GetWriteBandwidth() uint64 {
	if m != nil {
		return m.WriteBandwidth
	}
	return 0
}

func (m *Metric) GetReadLatency() uint64 {
	if m != nil {
		return m.ReadLatency
	}
	return 0
}

func (m *Metric) GetWriteLatency() uint64 {
	if m != nil {
		return m.WriteLatency
	}
	return 0
}

func (m *Metric) GetIOPS() uint64 {
	if m != nil {
		return m.IOPS
	}
	return 0
}

type MetricGetReply struct {
	Metric               *Metric  `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricGetReply) Reset()         { *m = MetricGetReply{} }
func (m *MetricGetReply) String() string { return proto.CompactTextString(m) }
func (*MetricGetReply) ProtoMessage()    {}
func (*MetricGetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{19}
}

func (m *MetricGetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricGetReply.Unmarshal(m, b)
}
func (m *MetricGetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricGetReply.Marshal(b, m, deterministic)
}
func (m *MetricGetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricGetReply.Merge(m, src)
}
func (m *MetricGetReply) XXX_Size() int {
	return xxx_messageInfo_MetricGetReply.Size(m)
}
func (m *MetricGetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricGetReply.DiscardUnknown(m)
}

var xxx_messageInfo_MetricGetReply proto.InternalMessageInfo

func (m *MetricGetReply) GetMetric() *Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto.RegisterEnum("ptypes.ReplicaMode", ReplicaMode_name, ReplicaMode_value)
	proto.RegisterType((*Volume)(nil), "ptypes.Volume")
	proto.RegisterType((*ReplicaAddress)(nil), "ptypes.ReplicaAddress")
	proto.RegisterType((*ControllerReplica)(nil), "ptypes.ControllerReplica")
	proto.RegisterType((*VolumeStartRequest)(nil), "ptypes.VolumeStartRequest")
	proto.RegisterType((*VolumeSnapshotRequest)(nil), "ptypes.VolumeSnapshotRequest")
	proto.RegisterMapType((map[string]string)(nil), "ptypes.VolumeSnapshotRequest.LabelsEntry")
	proto.RegisterType((*VolumeSnapshotReply)(nil), "ptypes.VolumeSnapshotReply")
	proto.RegisterType((*VolumeRevertRequest)(nil), "ptypes.VolumeRevertRequest")
	proto.RegisterType((*VolumeExpandRequest)(nil), "ptypes.VolumeExpandRequest")
	proto.RegisterType((*VolumeFrontendStartRequest)(nil), "ptypes.VolumeFrontendStartRequest")
	proto.RegisterType((*VolumeUnmapMarkSnapChainRemovedSetRequest)(nil), "ptypes.VolumeUnmapMarkSnapChainRemovedSetRequest")
	proto.RegisterType((*VolumePrepareRestoreRequest)(nil), "ptypes.VolumePrepareRestoreRequest")
	proto.RegisterType((*VolumeFinishRestoreRequest)(nil), "ptypes.VolumeFinishRestoreRequest")
	proto.RegisterType((*ReplicaListReply)(nil), "ptypes.ReplicaListReply")
	proto.RegisterType((*ControllerReplicaCreateRequest)(nil), "ptypes.ControllerReplicaCreateRequest")
	proto.RegisterType((*ReplicaPrepareRebuildReply)(nil), "ptypes.ReplicaPrepareRebuildReply")
	proto.RegisterType((*JournalListRequest)(nil), "ptypes.JournalListRequest")
	proto.RegisterType((*VersionOutput)(nil), "ptypes.VersionOutput")
	proto.RegisterType((*VersionDetailGetReply)(nil), "ptypes.VersionDetailGetReply")
	proto.RegisterType((*Metric)(nil), "ptypes.Metric")
	proto.RegisterType((*MetricGetReply)(nil), "ptypes.MetricGetReply")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdf, 0x6e, 0xdb, 0xb6,
	0x17, 0xfe, 0x29, 0x76, 0x9c, 0xf8, 0x38, 0xf5, 0xcf, 0x65, 0x93, 0x54, 0x75, 0xd7, 0xc1, 0x10,
	0x86, 0xcc, 0xcd, 0x06, 0xb7, 0x73, 0x31, 0x2c, 0xdd, 0x30, 0xb4, 0x59, 0xea, 0x74, 0x19, 0x12,
	0xb4, 0x90, 0xd1, 0xf6, 0x66, 0x80, 0xc1, 0x58, 0x74, 0x42, 0x54, 0xa2, 0x54, 0x8a, 0x4a, 0xe7,
	0xdd, 0xed, 0x6a, 0xb7, 0xbb, 0xda, 0x3b, 0xec, 0x6e, 0x8f, 0xb2, 0x47, 0x1a, 0xf8, 0x47, 0xb2,
	0x24, 0x5b, 0x69, 0x77, 0x25, 0xf2, 0x3b, 0xdf, 0x39, 0x3c, 0x3c, 0x3c, 0xe4, 0x27, 0xe8, 0x4c,
	0x43, 0x26, 0x78, 0xe8, 0xfb, 0x84, 0x0f, 0x22, 0x1e, 0x8a, 0x10, 0x35, 0x22, 0x31, 0x8f, 0x48,
	0xdc, 0xbd, 0x7b, 0x11, 0x86, 0x17, 0x3e, 0x79, 0xa0, 0xd0, 0xf3, 0x64, 0xf6, 0x80, 0x04, 0x91,
	0x98, 0x6b, 0x52, 0x77, 0x6b, 0x1a, 0x06, 0x41, 0xc8, 0xf4, 0xcc, 0xf9, 0xad, 0x06, 0x8d, 0xd7,
	0xa1, 0x9f, 0x04, 0x04, 0x21, 0xa8, 0x33, 0x1c, 0x10, 0xdb, 0xea, 0x59, 0xfd, 0xa6, 0xab, 0xc6,
	0x12, 0x8b, 0xe9, 0xaf, 0xc4, 0x5e, 0xeb, 0x59, 0xfd, 0x9a, 0xab, 0xc6, 0xc8, 0x81, 0x2d, 0x4e,
	0x22, 0x9f, 0x4e, 0xf1, 0x51, 0x98, 0x30, 0x61, 0xd7, 0x7a, 0x56, 0x7f, 0xdd, 0x2d, 0x60, 0xa8,
	0x0b, 0x9b, 0x84, 0x79, 0x51, 0x48, 0x99, 0xb0, 0xeb, 0x2a, 0x5e, 0x36, 0x97, 0xb6, 0x19, 0x0f,
	0x99, 0x20, 0xcc, 0xb3, 0xd7, 0xb5, 0x2d, 0x9d, 0xa3, 0xcf, 0xe0, 0x46, 0x3a, 0x1e, 0x0b, 0x2c,
	0x88, 0xdd, 0x50, 0x84, 0x22, 0x88, 0x7a, 0xd0, 0xa2, 0xf1, 0xe8, 0x97, 0x08, 0x33, 0x8f, 0xb2,
	0x0b, 0x7b, 0xa3, 0x67, 0xf5, 0x37, 0xdd, 0x3c, 0x84, 0x1e, 0xc2, 0xb6, 0x8f, 0x63, 0x31, 0x21,
	0x12, 0x89, 0x69, 0xc8, 0x26, 0x84, 0xf3, 0x90, 0xdb, 0x9b, 0x2a, 0x1c, 0x92, 0xb6, 0x51, 0x6a,
	0x1a, 0x49, 0x0b, 0xfa, 0x06, 0xec, 0x92, 0xc7, 0x0c, 0x53, 0x9f, 0x78, 0x13, 0x2c, 0xec, 0xa6,
	0xf2, 0xda, 0x29, 0x78, 0x1d, 0x2b, 0xeb, 0xa1, 0x40, 0x4f, 0xe1, 0x5e, 0xc2, 0x02, 0x1c, 0x4d,
	0x02, 0xcc, 0xdf, 0x4e, 0x62, 0x86, 0xa3, 0xc9, 0xf4, 0x12, 0x53, 0x36, 0xe1, 0x24, 0x08, 0xaf,
	0x88, 0x67, 0x83, 0x4a, 0xef, 0x8e, 0x22, 0x9d, 0x61, 0xfe, 0x76, 0xcc, 0x70, 0x74, 0x24, 0x19,
	0xae, 0x26, 0x38, 0xfb, 0xd0, 0x76, 0x75, 0xf1, 0x0e, 0x3d, 0x8f, 0x93, 0x38, 0x46, 0x36, 0x6c,
	0x60, 0x3d, 0x34, 0xa7, 0x91, 0x4e, 0x1d, 0x06, 0x37, 0x8f, 0xb2, 0x63, 0x37, 0x5e, 0xe8, 0x61,
	0x91, 0xde, 0x1a, 0xee, 0x0e, 0x74, 0x27, 0x0c, 0x8a, 0x71, 0xb3, 0x30, 0xe8, 0x73, 0xa8, 0x07,
	0xa1, 0xa7, 0xcf, 0xb5, 0x3d, 0xbc, 0x55, 0xa2, 0x9f, 0x85, 0x1e, 0x71, 0x15, 0xc1, 0xb9, 0x02,
	0xa4, 0xdb, 0x63, 0x2c, 0x30, 0x17, 0x2e, 0x79, 0x97, 0x90, 0x58, 0xa0, 0x7d, 0xe8, 0xf0, 0x42,
	0x64, 0x22, 0x57, 0xae, 0xf5, 0x9b, 0xee, 0x12, 0xbe, 0xb2, 0x85, 0x7a, 0xd0, 0x9a, 0x26, 0x9c,
	0x13, 0x26, 0xc6, 0xd2, 0x54, 0x53, 0xa6, 0x3c, 0xe4, 0xfc, 0x65, 0xc1, 0x8e, 0x59, 0x98, 0xe1,
	0x28, 0xbe, 0x0c, 0xb3, 0xb5, 0x57, 0xb5, 0xe9, 0x21, 0x34, 0x7c, 0x7c, 0x4e, 0xfc, 0xd8, 0x5e,
	0xeb, 0xd5, 0xfa, 0xad, 0xe1, 0xfd, 0x74, 0x43, 0x2b, 0x43, 0x0c, 0x4e, 0x15, 0x77, 0xc4, 0x04,
	0x9f, 0xbb, 0xc6, 0xb1, 0xfb, 0x18, 0x5a, 0x39, 0x18, 0x75, 0xa0, 0xf6, 0x96, 0xcc, 0xcd, 0x22,
	0x72, 0x88, 0xb6, 0x61, 0xfd, 0x0a, 0xfb, 0x89, 0xde, 0x48, 0xd3, 0xd5, 0x93, 0x6f, 0xd7, 0x0e,
	0x2c, 0xe7, 0x3e, 0xdc, 0x2a, 0xaf, 0x13, 0xf9, 0xf3, 0x55, 0x89, 0x2e, 0xa8, 0x2e, 0xb9, 0x22,
	0xfc, 0xba, 0x3d, 0x2d, 0xa8, 0xba, 0xab, 0x73, 0x54, 0x55, 0x4e, 0x6b, 0x51, 0x4e, 0xe7, 0x00,
	0xba, 0x9a, 0x7a, 0xbc, 0xb8, 0x26, 0x8b, 0xe0, 0xf9, 0xfb, 0x66, 0x15, 0xef, 0x9b, 0x33, 0x82,
	0xfb, 0xda, 0xf3, 0x55, 0x55, 0x77, 0x8e, 0x49, 0x16, 0xc8, 0x86, 0x0d, 0xc2, 0xf0, 0xb9, 0x4f,
	0x74, 0x9c, 0x4d, 0x37, 0x9d, 0x3a, 0x87, 0x70, 0x57, 0x87, 0x79, 0xc9, 0x49, 0x84, 0x39, 0x71,
	0x49, 0x2c, 0x42, 0xf9, 0xd1, 0x8e, 0x0e, 0x6c, 0xc9, 0xbb, 0x63, 0xd0, 0x34, 0x8b, 0x02, 0xe6,
	0x1c, 0x67, 0x7b, 0xa0, 0x8c, 0xc6, 0x97, 0xa5, 0x08, 0x7d, 0xf8, 0xbf, 0xe9, 0x8e, 0x52, 0x90,
	0x32, 0xec, 0x9c, 0x40, 0xc7, 0x74, 0xf1, 0x29, 0x8d, 0xcd, 0x49, 0x7c, 0x0d, 0x9b, 0xa6, 0x2d,
	0x75, 0x9b, 0xb6, 0x86, 0x77, 0xd2, 0x06, 0x59, 0xba, 0x4c, 0x6e, 0x46, 0x75, 0xfe, 0xb0, 0xe0,
	0xd3, 0x25, 0xfb, 0x11, 0x27, 0x58, 0x90, 0x5c, 0x49, 0x56, 0x5f, 0x54, 0xf4, 0x05, 0xdc, 0x8c,
	0x4d, 0x3b, 0x4c, 0x38, 0x79, 0x97, 0x50, 0x99, 0xf3, 0x9a, 0x2a, 0x5b, 0x27, 0xce, 0xf5, 0xa3,
	0xc4, 0xb3, 0xeb, 0x58, 0xfb, 0xd0, 0x75, 0xfc, 0xd3, 0x82, 0xae, 0x41, 0xb3, 0x52, 0x9f, 0x27,
	0xd4, 0xf7, 0xf4, 0x46, 0x1f, 0xc1, 0x86, 0xc9, 0xde, 0x3c, 0x04, 0xd7, 0xec, 0x33, 0x65, 0xa2,
	0x23, 0xb8, 0x15, 0xcf, 0xd9, 0x74, 0x32, 0xa3, 0x3e, 0x99, 0x50, 0x36, 0x0b, 0x27, 0x3e, 0x8d,
	0x85, 0xb9, 0x49, 0xdb, 0x69, 0x80, 0xf1, 0x9c, 0x4d, 0x8f, 0xa9, 0x4f, 0x4e, 0xd8, 0x2c, 0x74,
	0x3b, 0x71, 0x6e, 0x26, 0xeb, 0xec, 0xec, 0x03, 0xfa, 0x29, 0x4c, 0x38, 0xc3, 0xbe, 0x2e, 0xbb,
	0x2e, 0xcf, 0x36, 0xac, 0xfb, 0x34, 0xa0, 0xc2, 0x74, 0xab, 0x9e, 0x38, 0xbf, 0xd7, 0xe0, 0xc6,
	0x6b, 0xc2, 0xe5, 0x2b, 0xfa, 0x22, 0x11, 0x51, 0xa2, 0xca, 0x78, 0xa5, 0x81, 0xb4, 0x8c, 0x66,
	0x8a, 0x3e, 0x81, 0xe6, 0x05, 0x15, 0x47, 0x61, 0x20, 0xa3, 0xe8, 0x9b, 0xb7, 0x00, 0xa4, 0x55,
	0xed, 0xfe, 0x99, 0x94, 0x8a, 0x9a, 0xb6, 0x66, 0x80, 0x14, 0x93, 0xa9, 0x4f, 0x0f, 0x5f, 0x9e,
	0x98, 0xc5, 0x94, 0x12, 0xd5, 0xdc, 0x22, 0x28, 0xdf, 0x32, 0x0d, 0x9c, 0x51, 0x96, 0x12, 0xd7,
	0x15, 0x71, 0x09, 0x47, 0x43, 0xd8, 0x5e, 0x88, 0x6e, 0x2e, 0x70, 0x43, 0xf1, 0x57, 0xda, 0xd0,
	0x01, 0xdc, 0x2e, 0xe0, 0xb9, 0x65, 0x36, 0x94, 0x5b, 0x95, 0x19, 0x7d, 0x09, 0x37, 0x3d, 0x2c,
	0xf0, 0x71, 0xc8, 0x03, 0x2c, 0x52, 0x9f, 0x4d, 0xe5, 0xb3, 0x6c, 0x90, 0xb9, 0x2d, 0xc0, 0xdc,
	0x22, 0x4d, 0x9d, 0xdb, 0x2a, 0x9b, 0xf3, 0x23, 0xec, 0x98, 0xe1, 0x33, 0x22, 0x30, 0xf5, 0x9f,
	0x13, 0x73, 0x63, 0x1e, 0x14, 0x0f, 0xa4, 0x35, 0xdc, 0xc9, 0x5e, 0xd4, 0xfc, 0xc1, 0x65, 0xe7,
	0xe4, 0xfc, 0x6d, 0x41, 0xe3, 0x8c, 0x08, 0x4e, 0xa7, 0xb2, 0xec, 0x9c, 0x60, 0xef, 0x07, 0xcc,
	0xbc, 0xf7, 0xd4, 0x13, 0x97, 0x2a, 0x42, 0xdd, 0x2d, 0x82, 0x68, 0x0f, 0xda, 0xef, 0x39, 0x15,
	0x64, 0x41, 0x5b, 0x53, 0xb4, 0x12, 0x2a, 0xa5, 0x42, 0x3a, 0x9e, 0x62, 0x41, 0xd8, 0x74, 0xae,
	0x0e, 0xb9, 0xee, 0xe6, 0x21, 0xf9, 0xba, 0x28, 0x9f, 0x94, 0x52, 0x57, 0x94, 0x02, 0x26, 0x5f,
	0x4d, 0xfa, 0xe2, 0xe5, 0x58, 0x1d, 0x6c, 0xdd, 0x55, 0x63, 0xe7, 0x00, 0xda, 0x3a, 0xe3, 0x6c,
	0xd7, 0x7b, 0xd0, 0x08, 0x14, 0x62, 0x36, 0xdd, 0x4e, 0x37, 0xad, 0x79, 0xae, 0xb1, 0xee, 0xef,
	0x41, 0x2b, 0x77, 0x35, 0x51, 0x03, 0xd6, 0xde, 0xbc, 0xe8, 0xfc, 0x4f, 0x7e, 0xdd, 0x37, 0x1d,
	0x0b, 0x6d, 0x40, 0x6d, 0xe4, 0xba, 0x9d, 0xb5, 0xe1, 0x3f, 0x90, 0x57, 0xeb, 0x31, 0xe1, 0x57,
	0x74, 0x4a, 0xd0, 0x23, 0x68, 0xea, 0x97, 0xee, 0x39, 0x11, 0x68, 0x77, 0xa0, 0xff, 0xd5, 0x06,
	0xe9, 0xbf, 0xda, 0x60, 0x24, 0xff, 0xd5, 0xba, 0xed, 0xa2, 0x82, 0xa1, 0xc7, 0xd0, 0xca, 0xe9,
	0x30, 0xea, 0x96, 0x04, 0x2e, 0xf7, 0xde, 0x2f, 0xb9, 0x1e, 0x40, 0xdb, 0xb0, 0x2e, 0x13, 0xe1,
	0x85, 0xef, 0xd9, 0x47, 0x2f, 0x7a, 0x9a, 0x79, 0x9a, 0x07, 0x0b, 0xdd, 0xbb, 0x56, 0x58, 0xbb,
	0x77, 0xab, 0xcc, 0xb2, 0xba, 0xdf, 0xc1, 0x56, 0x5e, 0xfb, 0x50, 0x89, 0x5c, 0x50, 0xc4, 0xa5,
	0x54, 0x32, 0x67, 0xad, 0x86, 0x65, 0xe7, 0x82, 0x46, 0x2e, 0x39, 0x9f, 0xa4, 0x52, 0x5a, 0xd0,
	0x47, 0xe4, 0x14, 0x69, 0xab, 0xc4, 0x73, 0x29, 0xd4, 0x53, 0xd8, 0x2d, 0xb1, 0xff, 0x6b, 0x51,
	0x2f, 0xc0, 0xf9, 0xb0, 0xe4, 0xa2, 0xaf, 0x8a, 0x5e, 0x1f, 0x21, 0xcf, 0x4b, 0x0b, 0x3d, 0xc9,
	0xba, 0x54, 0x3e, 0xc9, 0x95, 0xf9, 0xd9, 0x25, 0xb5, 0x59, 0xc8, 0xe6, 0x13, 0x00, 0x83, 0xe9,
	0x4e, 0x5d, 0xf9, 0x4f, 0xd9, 0xad, 0x96, 0x18, 0xf4, 0x33, 0xdc, 0xae, 0xd0, 0x4f, 0xb4, 0x57,
	0xe9, 0x55, 0x10, 0xd8, 0xeb, 0xa2, 0x3f, 0x81, 0x1b, 0x66, 0xf8, 0x8c, 0xf8, 0x44, 0x90, 0xca,
	0x0c, 0x2b, 0x76, 0x8e, 0x46, 0x59, 0x80, 0x57, 0x91, 0x27, 0x93, 0xaa, 0x5e, 0xec, 0xba, 0x3c,
	0xc6, 0xb0, 0xb3, 0x52, 0x92, 0x2b, 0xf3, 0x71, 0x4a, 0xf8, 0x2a, 0x25, 0x3f, 0x81, 0x6d, 0x63,
	0x7d, 0x4d, 0x38, 0x9d, 0xcd, 0x3f, 0x14, 0xf3, 0x9a, 0xfc, 0x0e, 0xa1, 0x95, 0x93, 0xe6, 0xc5,
	0xd3, 0xb1, 0xac, 0xd7, 0x95, 0x95, 0x3a, 0x81, 0x4e, 0x59, 0x27, 0x2a, 0xfb, 0xe9, 0x5e, 0x49,
	0x29, 0x4a, 0xca, 0xf2, 0x3d, 0x34, 0xb3, 0x57, 0xb7, 0x32, 0xc6, 0x6e, 0xf1, 0xe1, 0x4d, 0x9d,
	0x1f, 0x5a, 0xe7, 0x0d, 0xc5, 0x7c, 0xf4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x8d, 0x50,
	0x87, 0xfd, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	VolumeGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Volume, error)
	VolumeStart(ctx context.Context, in *VolumeStartRequest, opts ...grpc.CallOption) (*Volume, error)
	VolumeShutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Volume, error)
	VolumeSnapshot(ctx context.Context, in *VolumeSnapshotRequest, opts ...grpc.CallOption) (*VolumeSnapshotReply, error)
	VolumeRevert(ctx context.Context, in *VolumeRevertRequest, opts ...grpc.CallOption) (*Volume, error)
	VolumeExpand(ctx context.Context, in *VolumeExpandRequest, opts ...grpc.CallOption) (*Volume, error)
	VolumeFrontendStart(ctx context.Context, in *VolumeFrontendStartRequest, opts ...grpc.CallOption) (*Volume, error)
	VolumeFrontendShutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Volume, error)
	VolumeUnmapMarkSnapChainRemovedSet(ctx context.Context, in *VolumeUnmapMarkSnapChainRemovedSetRequest, opts ...grpc.CallOption) (*Volume, error)
	ReplicaList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReplicaListReply, error)
	ReplicaGet(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error)
	ControllerReplicaCreate(ctx context.Context, in *ControllerReplicaCreateRequest, opts ...grpc.CallOption) (*ControllerReplica, error)
	ReplicaDelete(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*empty.Empty, error)
	ReplicaUpdate(ctx context.Context, in *ControllerReplica, opts ...grpc.CallOption) (*ControllerReplica, error)
	ReplicaPrepareRebuild(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ReplicaPrepareRebuildReply, error)
	ReplicaVerifyRebuild(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error)
	JournalList(ctx context.Context, in *JournalListRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	VersionDetailGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionDetailGetReply, error)
	MetricGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ControllerService_MetricGetClient, error)
}

type controllerServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerServiceClient(cc *grpc.ClientConn) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) VolumeGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeStart(ctx context.Context, in *VolumeStartRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeShutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeSnapshot(ctx context.Context, in *VolumeSnapshotRequest, opts ...grpc.CallOption) (*VolumeSnapshotReply, error) {
	out := new(VolumeSnapshotReply)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeRevert(ctx context.Context, in *VolumeRevertRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeRevert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeExpand(ctx context.Context, in *VolumeExpandRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeExpand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeFrontendStart(ctx context.Context, in *VolumeFrontendStartRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeFrontendStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeFrontendShutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeFrontendShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeUnmapMarkSnapChainRemovedSet(ctx context.Context, in *VolumeUnmapMarkSnapChainRemovedSetRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VolumeUnmapMarkSnapChainRemovedSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReplicaListReply, error) {
	out := new(ReplicaListReply)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/ReplicaList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaGet(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error) {
	out := new(ControllerReplica)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/ReplicaGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ControllerReplicaCreate(ctx context.Context, in *ControllerReplicaCreateRequest, opts ...grpc.CallOption) (*ControllerReplica, error) {
	out := new(ControllerReplica)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/ControllerReplicaCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaDelete(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/ReplicaDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaUpdate(ctx context.Context, in *ControllerReplica, opts ...grpc.CallOption) (*ControllerReplica, error) {
	out := new(ControllerReplica)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/ReplicaUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaPrepareRebuild(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ReplicaPrepareRebuildReply, error) {
	out := new(ReplicaPrepareRebuildReply)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/ReplicaPrepareRebuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaVerifyRebuild(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error) {
	out := new(ControllerReplica)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/ReplicaVerifyRebuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) JournalList(ctx context.Context, in *JournalListRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/JournalList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VersionDetailGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionDetailGetReply, error) {
	out := new(VersionDetailGetReply)
	err := c.cc.Invoke(ctx, "/ptypes.ControllerService/VersionDetailGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) MetricGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ControllerService_MetricGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControllerService_serviceDesc.Streams[0], "/ptypes.ControllerService/MetricGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceMetricGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_MetricGetClient interface {
	Recv() (*MetricGetReply, error)
	grpc.ClientStream
}

type controllerServiceMetricGetClient struct {
	grpc.ClientStream
}

func (x *controllerServiceMetricGetClient) Recv() (*MetricGetReply, error) {
	m := new(MetricGetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	VolumeGet(context.Context, *empty.Empty) (*Volume, error)
	VolumeStart(context.Context, *VolumeStartRequest) (*Volume, error)
	VolumeShutdown(context.Context, *empty.Empty) (*Volume, error)
	VolumeSnapshot(context.Context, *VolumeSnapshotRequest) (*VolumeSnapshotReply, error)
	VolumeRevert(context.Context, *VolumeRevertRequest) (*Volume, error)
	VolumeExpand(context.Context, *VolumeExpandRequest) (*Volume, error)
	VolumeFrontendStart(context.Context, *VolumeFrontendStartRequest) (*Volume, error)
	VolumeFrontendShutdown(context.Context, *empty.Empty) (*Volume, error)
	VolumeUnmapMarkSnapChainRemovedSet(context.Context, *VolumeUnmapMarkSnapChainRemovedSetRequest) (*Volume, error)
	ReplicaList(context.Context, *empty.Empty) (*ReplicaListReply, error)
	ReplicaGet(context.Context, *ReplicaAddress) (*ControllerReplica, error)
	ControllerReplicaCreate(context.Context, *ControllerReplicaCreateRequest) (*ControllerReplica, error)
	ReplicaDelete(context.Context, *ReplicaAddress) (*empty.Empty, error)
	ReplicaUpdate(context.Context, *ControllerReplica) (*ControllerReplica, error)
	ReplicaPrepareRebuild(context.Context, *ReplicaAddress) (*ReplicaPrepareRebuildReply, error)
	ReplicaVerifyRebuild(context.Context, *ReplicaAddress) (*ControllerReplica, error)
	JournalList(context.Context, *JournalListRequest) (*empty.Empty, error)
	VersionDetailGet(context.Context, *empty.Empty) (*VersionDetailGetReply, error)
	MetricGet(*empty.Empty, ControllerService_MetricGetServer) error
}

// UnimplementedControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (*UnimplementedControllerServiceServer) VolumeGet(ctx context.Context, req *empty.Empty) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeGet not implemented")
}
func (*UnimplementedControllerServiceServer) VolumeStart(ctx context.Context, req *VolumeStartRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeStart not implemented")
}
func (*UnimplementedControllerServiceServer) VolumeShutdown(ctx context.Context, req *empty.Empty) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeShutdown not implemented")
}
func (*UnimplementedControllerServiceServer) VolumeSnapshot(ctx context.Context, req *VolumeSnapshotRequest) (*VolumeSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeSnapshot not implemented")
}
func (*UnimplementedControllerServiceServer) VolumeRevert(ctx context.Context, req *VolumeRevertRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeRevert not implemented")
}
func (*UnimplementedControllerServiceServer) VolumeExpand(ctx context.Context, req *VolumeExpandRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeExpand not implemented")
}
func (*UnimplementedControllerServiceServer) VolumeFrontendStart(ctx context.Context, req *VolumeFrontendStartRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeFrontendStart not implemented")
}
func (*UnimplementedControllerServiceServer) VolumeFrontendShutdown(ctx context.Context, req *empty.Empty) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeFrontendShutdown not implemented")
}
func (*UnimplementedControllerServiceServer) VolumeUnmapMarkSnapChainRemovedSet(ctx context.Context, req *VolumeUnmapMarkSnapChainRemovedSetRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeUnmapMarkSnapChainRemovedSet not implemented")
}
func (*UnimplementedControllerServiceServer) ReplicaList(ctx context.Context, req *empty.Empty) (*ReplicaListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaList not implemented")
}
func (*UnimplementedControllerServiceServer) ReplicaGet(ctx context.Context, req *ReplicaAddress) (*ControllerReplica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaGet not implemented")
}
func (*UnimplementedControllerServiceServer) ControllerReplicaCreate(ctx context.Context, req *ControllerReplicaCreateRequest) (*ControllerReplica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControllerReplicaCreate not implemented")
}
func (*UnimplementedControllerServiceServer) ReplicaDelete(ctx context.Context, req *ReplicaAddress) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaDelete not implemented")
}
func (*UnimplementedControllerServiceServer) ReplicaUpdate(ctx context.Context, req *ControllerReplica) (*ControllerReplica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaUpdate not implemented")
}
func (*UnimplementedControllerServiceServer) ReplicaPrepareRebuild(ctx context.Context, req *ReplicaAddress) (*ReplicaPrepareRebuildReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaPrepareRebuild not implemented")
}
func (*UnimplementedControllerServiceServer) ReplicaVerifyRebuild(ctx context.Context, req *ReplicaAddress) (*ControllerReplica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaVerifyRebuild not implemented")
}
func (*UnimplementedControllerServiceServer) JournalList(ctx context.Context, req *JournalListRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JournalList not implemented")
}
func (*UnimplementedControllerServiceServer) VersionDetailGet(ctx context.Context, req *empty.Empty) (*VersionDetailGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionDetailGet not implemented")
}
func (*UnimplementedControllerServiceServer) MetricGet(req *empty.Empty, srv ControllerService_MetricGetServer) error {
	return status.Errorf(codes.Unimplemented, "method MetricGet not implemented")
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_VolumeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeGet(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeStart(ctx, req.(*VolumeStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeShutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeSnapshot(ctx, req.(*VolumeSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeRevert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeRevert(ctx, req.(*VolumeRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeExpand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeExpand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeExpand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeExpand(ctx, req.(*VolumeExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeFrontendStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeFrontendStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeFrontendStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeFrontendStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeFrontendStart(ctx, req.(*VolumeFrontendStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeFrontendShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeFrontendShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeFrontendShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeFrontendShutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeUnmapMarkSnapChainRemovedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeUnmapMarkSnapChainRemovedSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeUnmapMarkSnapChainRemovedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VolumeUnmapMarkSnapChainRemovedSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeUnmapMarkSnapChainRemovedSet(ctx, req.(*VolumeUnmapMarkSnapChainRemovedSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/ReplicaList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/ReplicaGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaGet(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ControllerReplicaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerReplicaCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ControllerReplicaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/ControllerReplicaCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ControllerReplicaCreate(ctx, req.(*ControllerReplicaCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/ReplicaDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaDelete(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerReplica)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/ReplicaUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaUpdate(ctx, req.(*ControllerReplica))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaPrepareRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaPrepareRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/ReplicaPrepareRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaPrepareRebuild(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaVerifyRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaVerifyRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/ReplicaVerifyRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaVerifyRebuild(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_JournalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).JournalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/JournalList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).JournalList(ctx, req.(*JournalListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VersionDetailGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VersionDetailGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ControllerService/VersionDetailGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VersionDetailGet(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_MetricGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).MetricGet(m, &controllerServiceMetricGetServer{stream})
}

type ControllerService_MetricGetServer interface {
	Send(*MetricGetReply) error
	grpc.ServerStream
}

type controllerServiceMetricGetServer struct {
	grpc.ServerStream
}

func (x *controllerServiceMetricGetServer) Send(m *MetricGetReply) error {
	return x.ServerStream.SendMsg(m)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ptypes.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeGet",
			Handler:    _ControllerService_VolumeGet_Handler,
		},
		{
			MethodName: "VolumeStart",
			Handler:    _ControllerService_VolumeStart_Handler,
		},
		{
			MethodName: "VolumeShutdown",
			Handler:    _ControllerService_VolumeShutdown_Handler,
		},
		{
			MethodName: "VolumeSnapshot",
			Handler:    _ControllerService_VolumeSnapshot_Handler,
		},
		{
			MethodName: "VolumeRevert",
			Handler:    _ControllerService_VolumeRevert_Handler,
		},
		{
			MethodName: "VolumeExpand",
			Handler:    _ControllerService_VolumeExpand_Handler,
		},
		{
			MethodName: "VolumeFrontendStart",
			Handler:    _ControllerService_VolumeFrontendStart_Handler,
		},
		{
			MethodName: "VolumeFrontendShutdown",
			Handler:    _ControllerService_VolumeFrontendShutdown_Handler,
		},
		{
			MethodName: "VolumeUnmapMarkSnapChainRemovedSet",
			Handler:    _ControllerService_VolumeUnmapMarkSnapChainRemovedSet_Handler,
		},
		{
			MethodName: "ReplicaList",
			Handler:    _ControllerService_ReplicaList_Handler,
		},
		{
			MethodName: "ReplicaGet",
			Handler:    _ControllerService_ReplicaGet_Handler,
		},
		{
			MethodName: "ControllerReplicaCreate",
			Handler:    _ControllerService_ControllerReplicaCreate_Handler,
		},
		{
			MethodName: "ReplicaDelete",
			Handler:    _ControllerService_ReplicaDelete_Handler,
		},
		{
			MethodName: "ReplicaUpdate",
			Handler:    _ControllerService_ReplicaUpdate_Handler,
		},
		{
			MethodName: "ReplicaPrepareRebuild",
			Handler:    _ControllerService_ReplicaPrepareRebuild_Handler,
		},
		{
			MethodName: "ReplicaVerifyRebuild",
			Handler:    _ControllerService_ReplicaVerifyRebuild_Handler,
		},
		{
			MethodName: "JournalList",
			Handler:    _ControllerService_JournalList_Handler,
		},
		{
			MethodName: "VersionDetailGet",
			Handler:    _ControllerService_VersionDetailGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MetricGet",
			Handler:       _ControllerService_MetricGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}
